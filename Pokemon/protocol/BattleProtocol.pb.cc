// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleProtocol.proto

#include "BattleProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace BattleProtocol {
class BattleTurnInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleTurnInfo> _instance;
} _BattleTurnInfo_default_instance_;
class BattleOperationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleOperationInfo> _instance;
} _BattleOperationInfo_default_instance_;
class BattleFinishInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleFinishInfo> _instance;
} _BattleFinishInfo_default_instance_;
class BattleStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleStartRequest> _instance;
} _BattleStartRequest_default_instance_;
class BattleStartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleStartResponse> _instance;
} _BattleStartResponse_default_instance_;
class BattleInviteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleInviteRequest> _instance;
} _BattleInviteRequest_default_instance_;
class BattleInviteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleInviteResponse> _instance;
} _BattleInviteResponse_default_instance_;
class BattleGiveupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleGiveupInfo> _instance;
} _BattleGiveupInfo_default_instance_;
class ChooseTrophieRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChooseTrophieRequest> _instance;
} _ChooseTrophieRequest_default_instance_;
}  // namespace BattleProtocol
static void InitDefaultsscc_info_BattleFinishInfo_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleFinishInfo_default_instance_;
    new (ptr) ::BattleProtocol::BattleFinishInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleFinishInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleFinishInfo_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleFinishInfo_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleGiveupInfo_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleGiveupInfo_default_instance_;
    new (ptr) ::BattleProtocol::BattleGiveupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleGiveupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleGiveupInfo_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleGiveupInfo_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleInviteRequest_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleInviteRequest_default_instance_;
    new (ptr) ::BattleProtocol::BattleInviteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleInviteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleInviteRequest_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleInviteRequest_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleInviteResponse_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleInviteResponse_default_instance_;
    new (ptr) ::BattleProtocol::BattleInviteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleInviteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleInviteResponse_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleInviteResponse_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleOperationInfo_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleOperationInfo_default_instance_;
    new (ptr) ::BattleProtocol::BattleOperationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleOperationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleOperationInfo_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleOperationInfo_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleStartRequest_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleStartRequest_default_instance_;
    new (ptr) ::BattleProtocol::BattleStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleStartRequest_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleStartRequest_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleStartResponse_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleStartResponse_default_instance_;
    new (ptr) ::BattleProtocol::BattleStartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleStartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleStartResponse_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleStartResponse_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_BattleTurnInfo_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_BattleTurnInfo_default_instance_;
    new (ptr) ::BattleProtocol::BattleTurnInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::BattleTurnInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleTurnInfo_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleTurnInfo_BattleProtocol_2eproto}, {}};

static void InitDefaultsscc_info_ChooseTrophieRequest_BattleProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleProtocol::_ChooseTrophieRequest_default_instance_;
    new (ptr) ::BattleProtocol::ChooseTrophieRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BattleProtocol::ChooseTrophieRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChooseTrophieRequest_BattleProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChooseTrophieRequest_BattleProtocol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BattleProtocol_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_BattleProtocol_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BattleProtocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BattleProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, skillname_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, type_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, selfdeltahp_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, destdeltahp_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, selfbuffid_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, selfbufflast_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, destbuffid_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleTurnInfo, destbufflast_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleOperationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleOperationInfo, isusera_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleOperationInfo, skillindex_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleOperationInfo, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleFinishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleFinishInfo, result_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleFinishInfo, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartRequest, battlemode_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartRequest, fromuser_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartRequest, destuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartResponse, status_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartResponse, isusera_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartResponse, urpkmid_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleStartResponse, tapkmid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteRequest, battlemode_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteRequest, fromuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteResponse, battlemode_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteResponse, fromuser_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteResponse, destuser_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleInviteResponse, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleGiveupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::BattleGiveupInfo, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::ChooseTrophieRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::ChooseTrophieRequest, pkmid_1_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::ChooseTrophieRequest, pkmid_2_),
  PROTOBUF_FIELD_OFFSET(::BattleProtocol::ChooseTrophieRequest, pkmid_3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BattleProtocol::BattleTurnInfo)},
  { 13, -1, sizeof(::BattleProtocol::BattleOperationInfo)},
  { 21, -1, sizeof(::BattleProtocol::BattleFinishInfo)},
  { 28, -1, sizeof(::BattleProtocol::BattleStartRequest)},
  { 36, -1, sizeof(::BattleProtocol::BattleStartResponse)},
  { 45, -1, sizeof(::BattleProtocol::BattleInviteRequest)},
  { 52, -1, sizeof(::BattleProtocol::BattleInviteResponse)},
  { 61, -1, sizeof(::BattleProtocol::BattleGiveupInfo)},
  { 67, -1, sizeof(::BattleProtocol::ChooseTrophieRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleTurnInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleOperationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleFinishInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleStartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleInviteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleInviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_BattleGiveupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleProtocol::_ChooseTrophieRequest_default_instance_),
};

const char descriptor_table_protodef_BattleProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024BattleProtocol.proto\022\016BattleProtocol\"\257"
  "\001\n\016BattleTurnInfo\022\021\n\tskillName\030\001 \001(\014\022\014\n\004"
  "type\030\002 \001(\005\022\023\n\013selfDeltaHP\030\003 \001(\005\022\023\n\013destD"
  "eltaHP\030\004 \001(\005\022\022\n\nselfBuffID\030\005 \001(\005\022\024\n\014self"
  "BuffLast\030\006 \001(\005\022\022\n\ndestBuffID\030\007 \001(\005\022\024\n\014de"
  "stBuffLast\030\010 \001(\005\"L\n\023BattleOperationInfo\022"
  "\017\n\007isUserA\030\001 \001(\005\022\022\n\nskillIndex\030\002 \001(\005\022\020\n\010"
  "userName\030\003 \001(\014\"\356\001\n\020BattleFinishInfo\022=\n\006r"
  "esult\030\001 \001(\0162-.BattleProtocol.BattleFinis"
  "hInfo.BattleResult\0229\n\004mode\030\002 \001(\0162+.Battl"
  "eProtocol.BattleFinishInfo.FinishMode\"!\n"
  "\014BattleResult\022\007\n\003WIN\020\000\022\010\n\004LOSE\020\001\"=\n\nFini"
  "shMode\022\n\n\006NORMAL\020\000\022\031\n\025OPPOSITE_DISCONNEC"
  "TED\020\001\022\010\n\004DRAW\020\002\"L\n\022BattleStartRequest\022\022\n"
  "\nbattleMode\030\001 \001(\005\022\020\n\010fromUser\030\002 \001(\014\022\020\n\010d"
  "estUser\030\003 \001(\014\"{\n\023BattleStartResponse\0221\n\006"
  "status\030\001 \001(\0162!.BattleProtocol.BattleStar"
  "tStatus\022\017\n\007isUserA\030\002 \001(\005\022\017\n\007urPkmId\030\003 \001("
  "\005\022\017\n\007taPkmId\030\004 \001(\005\";\n\023BattleInviteReques"
  "t\022\022\n\nbattleMode\030\001 \001(\005\022\020\n\010fromUser\030\002 \001(\014\""
  "\177\n\024BattleInviteResponse\022\022\n\nbattleMode\030\001 "
  "\001(\005\022\020\n\010fromUser\030\002 \001(\014\022\020\n\010destUser\030\003 \001(\014\022"
  "/\n\004flag\030\004 \001(\0162!.BattleProtocol.BattleSta"
  "rtStatus\"$\n\020BattleGiveupInfo\022\020\n\010userName"
  "\030\001 \001(\014\"I\n\024ChooseTrophieRequest\022\017\n\007pkmID_"
  "1\030\001 \001(\005\022\017\n\007pkmID_2\030\002 \001(\005\022\017\n\007pkmID_3\030\003 \001("
  "\005*.\n\013BattleModel\022\016\n\nEXP_BATTLE\020\000\022\017\n\013DUEL"
  "_BATTLE\020\001*U\n\021BattleStartStatus\022\013\n\007SUCCES"
  "S\020\000\022\013\n\007REFUSED\020\001\022\021\n\rALREADY_START\020\002\022\023\n\017D"
  "EST_NOT_ONLINE\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BattleProtocol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BattleProtocol_2eproto_sccs[9] = {
  &scc_info_BattleFinishInfo_BattleProtocol_2eproto.base,
  &scc_info_BattleGiveupInfo_BattleProtocol_2eproto.base,
  &scc_info_BattleInviteRequest_BattleProtocol_2eproto.base,
  &scc_info_BattleInviteResponse_BattleProtocol_2eproto.base,
  &scc_info_BattleOperationInfo_BattleProtocol_2eproto.base,
  &scc_info_BattleStartRequest_BattleProtocol_2eproto.base,
  &scc_info_BattleStartResponse_BattleProtocol_2eproto.base,
  &scc_info_BattleTurnInfo_BattleProtocol_2eproto.base,
  &scc_info_ChooseTrophieRequest_BattleProtocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BattleProtocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BattleProtocol_2eproto = {
  false, false, descriptor_table_protodef_BattleProtocol_2eproto, "BattleProtocol.proto", 1184,
  &descriptor_table_BattleProtocol_2eproto_once, descriptor_table_BattleProtocol_2eproto_sccs, descriptor_table_BattleProtocol_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_BattleProtocol_2eproto::offsets,
  file_level_metadata_BattleProtocol_2eproto, 9, file_level_enum_descriptors_BattleProtocol_2eproto, file_level_service_descriptors_BattleProtocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BattleProtocol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BattleProtocol_2eproto)), true);
namespace BattleProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleFinishInfo_BattleResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BattleProtocol_2eproto);
  return file_level_enum_descriptors_BattleProtocol_2eproto[0];
}
bool BattleFinishInfo_BattleResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BattleFinishInfo_BattleResult BattleFinishInfo::WIN;
constexpr BattleFinishInfo_BattleResult BattleFinishInfo::LOSE;
constexpr BattleFinishInfo_BattleResult BattleFinishInfo::BattleResult_MIN;
constexpr BattleFinishInfo_BattleResult BattleFinishInfo::BattleResult_MAX;
constexpr int BattleFinishInfo::BattleResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleFinishInfo_FinishMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BattleProtocol_2eproto);
  return file_level_enum_descriptors_BattleProtocol_2eproto[1];
}
bool BattleFinishInfo_FinishMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BattleFinishInfo_FinishMode BattleFinishInfo::NORMAL;
constexpr BattleFinishInfo_FinishMode BattleFinishInfo::OPPOSITE_DISCONNECTED;
constexpr BattleFinishInfo_FinishMode BattleFinishInfo::DRAW;
constexpr BattleFinishInfo_FinishMode BattleFinishInfo::FinishMode_MIN;
constexpr BattleFinishInfo_FinishMode BattleFinishInfo::FinishMode_MAX;
constexpr int BattleFinishInfo::FinishMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BattleProtocol_2eproto);
  return file_level_enum_descriptors_BattleProtocol_2eproto[2];
}
bool BattleModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleStartStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BattleProtocol_2eproto);
  return file_level_enum_descriptors_BattleProtocol_2eproto[3];
}
bool BattleStartStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BattleTurnInfo::InitAsDefaultInstance() {
}
class BattleTurnInfo::_Internal {
 public:
};

BattleTurnInfo::BattleTurnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleTurnInfo)
}
BattleTurnInfo::BattleTurnInfo(const BattleTurnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skillname().empty()) {
    skillname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_skillname(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&destbufflast_) -
    reinterpret_cast<char*>(&type_)) + sizeof(destbufflast_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleTurnInfo)
}

void BattleTurnInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleTurnInfo_BattleProtocol_2eproto.base);
  skillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destbufflast_) -
      reinterpret_cast<char*>(&type_)) + sizeof(destbufflast_));
}

BattleTurnInfo::~BattleTurnInfo() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleTurnInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleTurnInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  skillname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleTurnInfo::ArenaDtor(void* object) {
  BattleTurnInfo* _this = reinterpret_cast< BattleTurnInfo* >(object);
  (void)_this;
}
void BattleTurnInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleTurnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleTurnInfo& BattleTurnInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleTurnInfo_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleTurnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleTurnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destbufflast_) -
      reinterpret_cast<char*>(&type_)) + sizeof(destbufflast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleTurnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes skillName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_skillname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selfDeltaHP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          selfdeltahp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 destDeltaHP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          destdeltahp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selfBuffID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          selfbuffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selfBuffLast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          selfbufflast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 destBuffID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          destbuffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 destBuffLast = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          destbufflast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleTurnInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleTurnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes skillName = 1;
  if (this->skillname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_skillname(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 selfDeltaHP = 3;
  if (this->selfdeltahp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_selfdeltahp(), target);
  }

  // int32 destDeltaHP = 4;
  if (this->destdeltahp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_destdeltahp(), target);
  }

  // int32 selfBuffID = 5;
  if (this->selfbuffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_selfbuffid(), target);
  }

  // int32 selfBuffLast = 6;
  if (this->selfbufflast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_selfbufflast(), target);
  }

  // int32 destBuffID = 7;
  if (this->destbuffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_destbuffid(), target);
  }

  // int32 destBuffLast = 8;
  if (this->destbufflast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_destbufflast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleTurnInfo)
  return target;
}

size_t BattleTurnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleTurnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes skillName = 1;
  if (this->skillname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skillname());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 selfDeltaHP = 3;
  if (this->selfdeltahp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selfdeltahp());
  }

  // int32 destDeltaHP = 4;
  if (this->destdeltahp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destdeltahp());
  }

  // int32 selfBuffID = 5;
  if (this->selfbuffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selfbuffid());
  }

  // int32 selfBuffLast = 6;
  if (this->selfbufflast() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selfbufflast());
  }

  // int32 destBuffID = 7;
  if (this->destbuffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destbuffid());
  }

  // int32 destBuffLast = 8;
  if (this->destbufflast() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destbufflast());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleTurnInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleTurnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleTurnInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleTurnInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleTurnInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleTurnInfo)
    MergeFrom(*source);
  }
}

void BattleTurnInfo::MergeFrom(const BattleTurnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleTurnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skillname().size() > 0) {
    _internal_set_skillname(from._internal_skillname());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.selfdeltahp() != 0) {
    _internal_set_selfdeltahp(from._internal_selfdeltahp());
  }
  if (from.destdeltahp() != 0) {
    _internal_set_destdeltahp(from._internal_destdeltahp());
  }
  if (from.selfbuffid() != 0) {
    _internal_set_selfbuffid(from._internal_selfbuffid());
  }
  if (from.selfbufflast() != 0) {
    _internal_set_selfbufflast(from._internal_selfbufflast());
  }
  if (from.destbuffid() != 0) {
    _internal_set_destbuffid(from._internal_destbuffid());
  }
  if (from.destbufflast() != 0) {
    _internal_set_destbufflast(from._internal_destbufflast());
  }
}

void BattleTurnInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleTurnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTurnInfo::CopyFrom(const BattleTurnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleTurnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTurnInfo::IsInitialized() const {
  return true;
}

void BattleTurnInfo::InternalSwap(BattleTurnInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skillname_.Swap(&other->skillname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleTurnInfo, destbufflast_)
      + sizeof(BattleTurnInfo::destbufflast_)
      - PROTOBUF_FIELD_OFFSET(BattleTurnInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleTurnInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleOperationInfo::InitAsDefaultInstance() {
}
class BattleOperationInfo::_Internal {
 public:
};

BattleOperationInfo::BattleOperationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleOperationInfo)
}
BattleOperationInfo::BattleOperationInfo(const BattleOperationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  ::memcpy(&isusera_, &from.isusera_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillindex_) -
    reinterpret_cast<char*>(&isusera_)) + sizeof(skillindex_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleOperationInfo)
}

void BattleOperationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleOperationInfo_BattleProtocol_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isusera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillindex_) -
      reinterpret_cast<char*>(&isusera_)) + sizeof(skillindex_));
}

BattleOperationInfo::~BattleOperationInfo() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleOperationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleOperationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleOperationInfo::ArenaDtor(void* object) {
  BattleOperationInfo* _this = reinterpret_cast< BattleOperationInfo* >(object);
  (void)_this;
}
void BattleOperationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleOperationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleOperationInfo& BattleOperationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleOperationInfo_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleOperationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleOperationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&isusera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillindex_) -
      reinterpret_cast<char*>(&isusera_)) + sizeof(skillindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleOperationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isUserA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isusera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skillIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skillindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleOperationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleOperationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isUserA = 1;
  if (this->isusera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_isusera(), target);
  }

  // int32 skillIndex = 2;
  if (this->skillindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_skillindex(), target);
  }

  // bytes userName = 3;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleOperationInfo)
  return target;
}

size_t BattleOperationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleOperationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // int32 isUserA = 1;
  if (this->isusera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isusera());
  }

  // int32 skillIndex = 2;
  if (this->skillindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleOperationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleOperationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleOperationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleOperationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleOperationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleOperationInfo)
    MergeFrom(*source);
  }
}

void BattleOperationInfo::MergeFrom(const BattleOperationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleOperationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.isusera() != 0) {
    _internal_set_isusera(from._internal_isusera());
  }
  if (from.skillindex() != 0) {
    _internal_set_skillindex(from._internal_skillindex());
  }
}

void BattleOperationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleOperationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleOperationInfo::CopyFrom(const BattleOperationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleOperationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleOperationInfo::IsInitialized() const {
  return true;
}

void BattleOperationInfo::InternalSwap(BattleOperationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleOperationInfo, skillindex_)
      + sizeof(BattleOperationInfo::skillindex_)
      - PROTOBUF_FIELD_OFFSET(BattleOperationInfo, isusera_)>(
          reinterpret_cast<char*>(&isusera_),
          reinterpret_cast<char*>(&other->isusera_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleOperationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleFinishInfo::InitAsDefaultInstance() {
}
class BattleFinishInfo::_Internal {
 public:
};

BattleFinishInfo::BattleFinishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleFinishInfo)
}
BattleFinishInfo::BattleFinishInfo(const BattleFinishInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&result_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleFinishInfo)
}

void BattleFinishInfo::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&result_)) + sizeof(mode_));
}

BattleFinishInfo::~BattleFinishInfo() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleFinishInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleFinishInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleFinishInfo::ArenaDtor(void* object) {
  BattleFinishInfo* _this = reinterpret_cast< BattleFinishInfo* >(object);
  (void)_this;
}
void BattleFinishInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleFinishInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleFinishInfo& BattleFinishInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleFinishInfo_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleFinishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleFinishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&result_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleFinishInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BattleProtocol.BattleFinishInfo.BattleResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::BattleProtocol::BattleFinishInfo_BattleResult>(val));
        } else goto handle_unusual;
        continue;
      // .BattleProtocol.BattleFinishInfo.FinishMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::BattleProtocol::BattleFinishInfo_FinishMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleFinishInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleFinishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BattleProtocol.BattleFinishInfo.BattleResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .BattleProtocol.BattleFinishInfo.FinishMode mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleFinishInfo)
  return target;
}

size_t BattleFinishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleFinishInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BattleProtocol.BattleFinishInfo.BattleResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // .BattleProtocol.BattleFinishInfo.FinishMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleFinishInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleFinishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleFinishInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleFinishInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleFinishInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleFinishInfo)
    MergeFrom(*source);
  }
}

void BattleFinishInfo::MergeFrom(const BattleFinishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleFinishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void BattleFinishInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleFinishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFinishInfo::CopyFrom(const BattleFinishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleFinishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFinishInfo::IsInitialized() const {
  return true;
}

void BattleFinishInfo::InternalSwap(BattleFinishInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleFinishInfo, mode_)
      + sizeof(BattleFinishInfo::mode_)
      - PROTOBUF_FIELD_OFFSET(BattleFinishInfo, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleFinishInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleStartRequest::InitAsDefaultInstance() {
}
class BattleStartRequest::_Internal {
 public:
};

BattleStartRequest::BattleStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleStartRequest)
}
BattleStartRequest::BattleStartRequest(const BattleStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromuser().empty()) {
    fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fromuser(),
      GetArena());
  }
  destuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destuser().empty()) {
    destuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destuser(),
      GetArena());
  }
  battlemode_ = from.battlemode_;
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleStartRequest)
}

void BattleStartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleStartRequest_BattleProtocol_2eproto.base);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battlemode_ = 0;
}

BattleStartRequest::~BattleStartRequest() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fromuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleStartRequest::ArenaDtor(void* object) {
  BattleStartRequest* _this = reinterpret_cast< BattleStartRequest* >(object);
  (void)_this;
}
void BattleStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleStartRequest& BattleStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleStartRequest_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battlemode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 battleMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battlemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fromUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes destUser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_destuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battlemode(), target);
  }

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fromuser(), target);
  }

  // bytes destUser = 3;
  if (this->destuser().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_destuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleStartRequest)
  return target;
}

size_t BattleStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fromuser());
  }

  // bytes destUser = 3;
  if (this->destuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destuser());
  }

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlemode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleStartRequest)
    MergeFrom(*source);
  }
}

void BattleStartRequest::MergeFrom(const BattleStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromuser().size() > 0) {
    _internal_set_fromuser(from._internal_fromuser());
  }
  if (from.destuser().size() > 0) {
    _internal_set_destuser(from._internal_destuser());
  }
  if (from.battlemode() != 0) {
    _internal_set_battlemode(from._internal_battlemode());
  }
}

void BattleStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStartRequest::CopyFrom(const BattleStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStartRequest::IsInitialized() const {
  return true;
}

void BattleStartRequest::InternalSwap(BattleStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fromuser_.Swap(&other->fromuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destuser_.Swap(&other->destuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(battlemode_, other->battlemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleStartResponse::InitAsDefaultInstance() {
}
class BattleStartResponse::_Internal {
 public:
};

BattleStartResponse::BattleStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleStartResponse)
}
BattleStartResponse::BattleStartResponse(const BattleStartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&tapkmid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(tapkmid_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleStartResponse)
}

void BattleStartResponse::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tapkmid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(tapkmid_));
}

BattleStartResponse::~BattleStartResponse() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleStartResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleStartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleStartResponse::ArenaDtor(void* object) {
  BattleStartResponse* _this = reinterpret_cast< BattleStartResponse* >(object);
  (void)_this;
}
void BattleStartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleStartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleStartResponse& BattleStartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleStartResponse_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tapkmid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(tapkmid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleStartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BattleProtocol.BattleStartStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::BattleProtocol::BattleStartStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 isUserA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isusera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 urPkmId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          urpkmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taPkmId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tapkmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleStartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BattleProtocol.BattleStartStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int32 isUserA = 2;
  if (this->isusera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_isusera(), target);
  }

  // int32 urPkmId = 3;
  if (this->urpkmid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_urpkmid(), target);
  }

  // int32 taPkmId = 4;
  if (this->tapkmid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tapkmid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleStartResponse)
  return target;
}

size_t BattleStartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleStartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BattleProtocol.BattleStartStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 isUserA = 2;
  if (this->isusera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isusera());
  }

  // int32 urPkmId = 3;
  if (this->urpkmid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_urpkmid());
  }

  // int32 taPkmId = 4;
  if (this->tapkmid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tapkmid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleStartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleStartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleStartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleStartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleStartResponse)
    MergeFrom(*source);
  }
}

void BattleStartResponse::MergeFrom(const BattleStartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.isusera() != 0) {
    _internal_set_isusera(from._internal_isusera());
  }
  if (from.urpkmid() != 0) {
    _internal_set_urpkmid(from._internal_urpkmid());
  }
  if (from.tapkmid() != 0) {
    _internal_set_tapkmid(from._internal_tapkmid());
  }
}

void BattleStartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStartResponse::CopyFrom(const BattleStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStartResponse::IsInitialized() const {
  return true;
}

void BattleStartResponse::InternalSwap(BattleStartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleStartResponse, tapkmid_)
      + sizeof(BattleStartResponse::tapkmid_)
      - PROTOBUF_FIELD_OFFSET(BattleStartResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleStartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleInviteRequest::InitAsDefaultInstance() {
}
class BattleInviteRequest::_Internal {
 public:
};

BattleInviteRequest::BattleInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleInviteRequest)
}
BattleInviteRequest::BattleInviteRequest(const BattleInviteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromuser().empty()) {
    fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fromuser(),
      GetArena());
  }
  battlemode_ = from.battlemode_;
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleInviteRequest)
}

void BattleInviteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleInviteRequest_BattleProtocol_2eproto.base);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battlemode_ = 0;
}

BattleInviteRequest::~BattleInviteRequest() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleInviteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleInviteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fromuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleInviteRequest::ArenaDtor(void* object) {
  BattleInviteRequest* _this = reinterpret_cast< BattleInviteRequest* >(object);
  (void)_this;
}
void BattleInviteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleInviteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleInviteRequest& BattleInviteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleInviteRequest_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleInviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleInviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battlemode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleInviteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 battleMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battlemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fromUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleInviteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleInviteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battlemode(), target);
  }

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fromuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleInviteRequest)
  return target;
}

size_t BattleInviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleInviteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fromuser());
  }

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlemode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleInviteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleInviteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleInviteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleInviteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleInviteRequest)
    MergeFrom(*source);
  }
}

void BattleInviteRequest::MergeFrom(const BattleInviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromuser().size() > 0) {
    _internal_set_fromuser(from._internal_fromuser());
  }
  if (from.battlemode() != 0) {
    _internal_set_battlemode(from._internal_battlemode());
  }
}

void BattleInviteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInviteRequest::CopyFrom(const BattleInviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInviteRequest::IsInitialized() const {
  return true;
}

void BattleInviteRequest::InternalSwap(BattleInviteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fromuser_.Swap(&other->fromuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(battlemode_, other->battlemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleInviteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleInviteResponse::InitAsDefaultInstance() {
}
class BattleInviteResponse::_Internal {
 public:
};

BattleInviteResponse::BattleInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleInviteResponse)
}
BattleInviteResponse::BattleInviteResponse(const BattleInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromuser().empty()) {
    fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fromuser(),
      GetArena());
  }
  destuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destuser().empty()) {
    destuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destuser(),
      GetArena());
  }
  ::memcpy(&battlemode_, &from.battlemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&battlemode_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleInviteResponse)
}

void BattleInviteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleInviteResponse_BattleProtocol_2eproto.base);
  fromuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&battlemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&battlemode_)) + sizeof(flag_));
}

BattleInviteResponse::~BattleInviteResponse() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleInviteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fromuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleInviteResponse::ArenaDtor(void* object) {
  BattleInviteResponse* _this = reinterpret_cast< BattleInviteResponse* >(object);
  (void)_this;
}
void BattleInviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleInviteResponse& BattleInviteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleInviteResponse_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&battlemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&battlemode_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleInviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 battleMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battlemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fromUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes destUser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_destuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BattleProtocol.BattleStartStatus flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::BattleProtocol::BattleStartStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleInviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battlemode(), target);
  }

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fromuser(), target);
  }

  // bytes destUser = 3;
  if (this->destuser().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_destuser(), target);
  }

  // .BattleProtocol.BattleStartStatus flag = 4;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleInviteResponse)
  return target;
}

size_t BattleInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleInviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fromUser = 2;
  if (this->fromuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fromuser());
  }

  // bytes destUser = 3;
  if (this->destuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destuser());
  }

  // int32 battleMode = 1;
  if (this->battlemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlemode());
  }

  // .BattleProtocol.BattleStartStatus flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleInviteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleInviteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleInviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleInviteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleInviteResponse)
    MergeFrom(*source);
  }
}

void BattleInviteResponse::MergeFrom(const BattleInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromuser().size() > 0) {
    _internal_set_fromuser(from._internal_fromuser());
  }
  if (from.destuser().size() > 0) {
    _internal_set_destuser(from._internal_destuser());
  }
  if (from.battlemode() != 0) {
    _internal_set_battlemode(from._internal_battlemode());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void BattleInviteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInviteResponse::CopyFrom(const BattleInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInviteResponse::IsInitialized() const {
  return true;
}

void BattleInviteResponse::InternalSwap(BattleInviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fromuser_.Swap(&other->fromuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destuser_.Swap(&other->destuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleInviteResponse, flag_)
      + sizeof(BattleInviteResponse::flag_)
      - PROTOBUF_FIELD_OFFSET(BattleInviteResponse, battlemode_)>(
          reinterpret_cast<char*>(&battlemode_),
          reinterpret_cast<char*>(&other->battlemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleInviteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleGiveupInfo::InitAsDefaultInstance() {
}
class BattleGiveupInfo::_Internal {
 public:
};

BattleGiveupInfo::BattleGiveupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.BattleGiveupInfo)
}
BattleGiveupInfo::BattleGiveupInfo(const BattleGiveupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.BattleGiveupInfo)
}

void BattleGiveupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleGiveupInfo_BattleProtocol_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BattleGiveupInfo::~BattleGiveupInfo() {
  // @@protoc_insertion_point(destructor:BattleProtocol.BattleGiveupInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleGiveupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleGiveupInfo::ArenaDtor(void* object) {
  BattleGiveupInfo* _this = reinterpret_cast< BattleGiveupInfo* >(object);
  (void)_this;
}
void BattleGiveupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleGiveupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleGiveupInfo& BattleGiveupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleGiveupInfo_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void BattleGiveupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.BattleGiveupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleGiveupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleGiveupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.BattleGiveupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.BattleGiveupInfo)
  return target;
}

size_t BattleGiveupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.BattleGiveupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleGiveupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.BattleGiveupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleGiveupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleGiveupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.BattleGiveupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.BattleGiveupInfo)
    MergeFrom(*source);
  }
}

void BattleGiveupInfo::MergeFrom(const BattleGiveupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.BattleGiveupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void BattleGiveupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.BattleGiveupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleGiveupInfo::CopyFrom(const BattleGiveupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.BattleGiveupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleGiveupInfo::IsInitialized() const {
  return true;
}

void BattleGiveupInfo::InternalSwap(BattleGiveupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleGiveupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChooseTrophieRequest::InitAsDefaultInstance() {
}
class ChooseTrophieRequest::_Internal {
 public:
};

ChooseTrophieRequest::ChooseTrophieRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleProtocol.ChooseTrophieRequest)
}
ChooseTrophieRequest::ChooseTrophieRequest(const ChooseTrophieRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pkmid_1_, &from.pkmid_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&pkmid_3_) -
    reinterpret_cast<char*>(&pkmid_1_)) + sizeof(pkmid_3_));
  // @@protoc_insertion_point(copy_constructor:BattleProtocol.ChooseTrophieRequest)
}

void ChooseTrophieRequest::SharedCtor() {
  ::memset(&pkmid_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkmid_3_) -
      reinterpret_cast<char*>(&pkmid_1_)) + sizeof(pkmid_3_));
}

ChooseTrophieRequest::~ChooseTrophieRequest() {
  // @@protoc_insertion_point(destructor:BattleProtocol.ChooseTrophieRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChooseTrophieRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChooseTrophieRequest::ArenaDtor(void* object) {
  ChooseTrophieRequest* _this = reinterpret_cast< ChooseTrophieRequest* >(object);
  (void)_this;
}
void ChooseTrophieRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChooseTrophieRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChooseTrophieRequest& ChooseTrophieRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChooseTrophieRequest_BattleProtocol_2eproto.base);
  return *internal_default_instance();
}


void ChooseTrophieRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleProtocol.ChooseTrophieRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pkmid_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkmid_3_) -
      reinterpret_cast<char*>(&pkmid_1_)) + sizeof(pkmid_3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChooseTrophieRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pkmID_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pkmid_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pkmID_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pkmid_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pkmID_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pkmid_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChooseTrophieRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleProtocol.ChooseTrophieRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pkmID_1 = 1;
  if (this->pkmid_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pkmid_1(), target);
  }

  // int32 pkmID_2 = 2;
  if (this->pkmid_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pkmid_2(), target);
  }

  // int32 pkmID_3 = 3;
  if (this->pkmid_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pkmid_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleProtocol.ChooseTrophieRequest)
  return target;
}

size_t ChooseTrophieRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleProtocol.ChooseTrophieRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pkmID_1 = 1;
  if (this->pkmid_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkmid_1());
  }

  // int32 pkmID_2 = 2;
  if (this->pkmid_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkmid_2());
  }

  // int32 pkmID_3 = 3;
  if (this->pkmid_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkmid_3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChooseTrophieRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleProtocol.ChooseTrophieRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseTrophieRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChooseTrophieRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleProtocol.ChooseTrophieRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleProtocol.ChooseTrophieRequest)
    MergeFrom(*source);
  }
}

void ChooseTrophieRequest::MergeFrom(const ChooseTrophieRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleProtocol.ChooseTrophieRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pkmid_1() != 0) {
    _internal_set_pkmid_1(from._internal_pkmid_1());
  }
  if (from.pkmid_2() != 0) {
    _internal_set_pkmid_2(from._internal_pkmid_2());
  }
  if (from.pkmid_3() != 0) {
    _internal_set_pkmid_3(from._internal_pkmid_3());
  }
}

void ChooseTrophieRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleProtocol.ChooseTrophieRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseTrophieRequest::CopyFrom(const ChooseTrophieRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleProtocol.ChooseTrophieRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseTrophieRequest::IsInitialized() const {
  return true;
}

void ChooseTrophieRequest::InternalSwap(ChooseTrophieRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChooseTrophieRequest, pkmid_3_)
      + sizeof(ChooseTrophieRequest::pkmid_3_)
      - PROTOBUF_FIELD_OFFSET(ChooseTrophieRequest, pkmid_1_)>(
          reinterpret_cast<char*>(&pkmid_1_),
          reinterpret_cast<char*>(&other->pkmid_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseTrophieRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BattleProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleTurnInfo* Arena::CreateMaybeMessage< ::BattleProtocol::BattleTurnInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleTurnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleOperationInfo* Arena::CreateMaybeMessage< ::BattleProtocol::BattleOperationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleOperationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleFinishInfo* Arena::CreateMaybeMessage< ::BattleProtocol::BattleFinishInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleFinishInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleStartRequest* Arena::CreateMaybeMessage< ::BattleProtocol::BattleStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleStartResponse* Arena::CreateMaybeMessage< ::BattleProtocol::BattleStartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleStartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleInviteRequest* Arena::CreateMaybeMessage< ::BattleProtocol::BattleInviteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleInviteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleInviteResponse* Arena::CreateMaybeMessage< ::BattleProtocol::BattleInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::BattleGiveupInfo* Arena::CreateMaybeMessage< ::BattleProtocol::BattleGiveupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::BattleGiveupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleProtocol::ChooseTrophieRequest* Arena::CreateMaybeMessage< ::BattleProtocol::ChooseTrophieRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleProtocol::ChooseTrophieRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
