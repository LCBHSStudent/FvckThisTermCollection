// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserProtocol_2eproto;
namespace UserProtocol {
class OnlineUserListRequestInfo;
class OnlineUserListRequestInfoDefaultTypeInternal;
extern OnlineUserListRequestInfoDefaultTypeInternal _OnlineUserListRequestInfo_default_instance_;
class OnlineUserListResponseInfo;
class OnlineUserListResponseInfoDefaultTypeInternal;
extern OnlineUserListResponseInfoDefaultTypeInternal _OnlineUserListResponseInfo_default_instance_;
class PokemonInfo;
class PokemonInfoDefaultTypeInternal;
extern PokemonInfoDefaultTypeInternal _PokemonInfo_default_instance_;
class TransferPokemonRequest;
class TransferPokemonRequestDefaultTypeInternal;
extern TransferPokemonRequestDefaultTypeInternal _TransferPokemonRequest_default_instance_;
class TransferPokemonResponse;
class TransferPokemonResponseDefaultTypeInternal;
extern TransferPokemonResponseDefaultTypeInternal _TransferPokemonResponse_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoResponse;
class UserInfoResponseDefaultTypeInternal;
extern UserInfoResponseDefaultTypeInternal _UserInfoResponse_default_instance_;
class UserLoginRequestInfo;
class UserLoginRequestInfoDefaultTypeInternal;
extern UserLoginRequestInfoDefaultTypeInternal _UserLoginRequestInfo_default_instance_;
class UserLoginResponseInfo;
class UserLoginResponseInfoDefaultTypeInternal;
extern UserLoginResponseInfoDefaultTypeInternal _UserLoginResponseInfo_default_instance_;
class UserPokemonDataRequestInfo;
class UserPokemonDataRequestInfoDefaultTypeInternal;
extern UserPokemonDataRequestInfoDefaultTypeInternal _UserPokemonDataRequestInfo_default_instance_;
class UserPokemonDataResponseInfo;
class UserPokemonDataResponseInfoDefaultTypeInternal;
extern UserPokemonDataResponseInfoDefaultTypeInternal _UserPokemonDataResponseInfo_default_instance_;
class UserSignUpRequestInfo;
class UserSignUpRequestInfoDefaultTypeInternal;
extern UserSignUpRequestInfoDefaultTypeInternal _UserSignUpRequestInfo_default_instance_;
class UserSignUpResponseInfo;
class UserSignUpResponseInfoDefaultTypeInternal;
extern UserSignUpResponseInfoDefaultTypeInternal _UserSignUpResponseInfo_default_instance_;
class UserStatusInfo;
class UserStatusInfoDefaultTypeInternal;
extern UserStatusInfoDefaultTypeInternal _UserStatusInfo_default_instance_;
}  // namespace UserProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::UserProtocol::OnlineUserListRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::OnlineUserListRequestInfo>(Arena*);
template<> ::UserProtocol::OnlineUserListResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::OnlineUserListResponseInfo>(Arena*);
template<> ::UserProtocol::PokemonInfo* Arena::CreateMaybeMessage<::UserProtocol::PokemonInfo>(Arena*);
template<> ::UserProtocol::TransferPokemonRequest* Arena::CreateMaybeMessage<::UserProtocol::TransferPokemonRequest>(Arena*);
template<> ::UserProtocol::TransferPokemonResponse* Arena::CreateMaybeMessage<::UserProtocol::TransferPokemonResponse>(Arena*);
template<> ::UserProtocol::UserInfoRequest* Arena::CreateMaybeMessage<::UserProtocol::UserInfoRequest>(Arena*);
template<> ::UserProtocol::UserInfoResponse* Arena::CreateMaybeMessage<::UserProtocol::UserInfoResponse>(Arena*);
template<> ::UserProtocol::UserLoginRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::UserLoginRequestInfo>(Arena*);
template<> ::UserProtocol::UserLoginResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::UserLoginResponseInfo>(Arena*);
template<> ::UserProtocol::UserPokemonDataRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::UserPokemonDataRequestInfo>(Arena*);
template<> ::UserProtocol::UserPokemonDataResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::UserPokemonDataResponseInfo>(Arena*);
template<> ::UserProtocol::UserSignUpRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::UserSignUpRequestInfo>(Arena*);
template<> ::UserProtocol::UserSignUpResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::UserSignUpResponseInfo>(Arena*);
template<> ::UserProtocol::UserStatusInfo* Arena::CreateMaybeMessage<::UserProtocol::UserStatusInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserProtocol {

enum UserSignUpResponseInfo_SignUpStatus : int {
  UserSignUpResponseInfo_SignUpStatus_SUCCESS = 0,
  UserSignUpResponseInfo_SignUpStatus_USER_ALREADY_EXISTS = 1,
  UserSignUpResponseInfo_SignUpStatus_USERNAME_FORMAT_ERROR = 2,
  UserSignUpResponseInfo_SignUpStatus_USERPSW_FORMAT_ERROR = 3,
  UserSignUpResponseInfo_SignUpStatus_SERVER_REFUSED = 4,
  UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE = 5,
  UserSignUpResponseInfo_SignUpStatus_UserSignUpResponseInfo_SignUpStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserSignUpResponseInfo_SignUpStatus_UserSignUpResponseInfo_SignUpStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserSignUpResponseInfo_SignUpStatus_IsValid(int value);
constexpr UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MIN = UserSignUpResponseInfo_SignUpStatus_SUCCESS;
constexpr UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX = UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE;
constexpr int UserSignUpResponseInfo_SignUpStatus_SignUpStatus_ARRAYSIZE = UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSignUpResponseInfo_SignUpStatus_descriptor();
template<typename T>
inline const std::string& UserSignUpResponseInfo_SignUpStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserSignUpResponseInfo_SignUpStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserSignUpResponseInfo_SignUpStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserSignUpResponseInfo_SignUpStatus_descriptor(), enum_t_value);
}
inline bool UserSignUpResponseInfo_SignUpStatus_Parse(
    const std::string& name, UserSignUpResponseInfo_SignUpStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserSignUpResponseInfo_SignUpStatus>(
    UserSignUpResponseInfo_SignUpStatus_descriptor(), name, value);
}
enum UserLoginResponseInfo_LoginStatus : int {
  UserLoginResponseInfo_LoginStatus_SUCCESS = 0,
  UserLoginResponseInfo_LoginStatus_USER_NOT_EXISTS = 1,
  UserLoginResponseInfo_LoginStatus_USERPSW_ERROR = 2,
  UserLoginResponseInfo_LoginStatus_SERVER_REFUSED = 3,
  UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE = 4,
  UserLoginResponseInfo_LoginStatus_UserLoginResponseInfo_LoginStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserLoginResponseInfo_LoginStatus_UserLoginResponseInfo_LoginStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserLoginResponseInfo_LoginStatus_IsValid(int value);
constexpr UserLoginResponseInfo_LoginStatus UserLoginResponseInfo_LoginStatus_LoginStatus_MIN = UserLoginResponseInfo_LoginStatus_SUCCESS;
constexpr UserLoginResponseInfo_LoginStatus UserLoginResponseInfo_LoginStatus_LoginStatus_MAX = UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE;
constexpr int UserLoginResponseInfo_LoginStatus_LoginStatus_ARRAYSIZE = UserLoginResponseInfo_LoginStatus_LoginStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserLoginResponseInfo_LoginStatus_descriptor();
template<typename T>
inline const std::string& UserLoginResponseInfo_LoginStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserLoginResponseInfo_LoginStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserLoginResponseInfo_LoginStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserLoginResponseInfo_LoginStatus_descriptor(), enum_t_value);
}
inline bool UserLoginResponseInfo_LoginStatus_Parse(
    const std::string& name, UserLoginResponseInfo_LoginStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserLoginResponseInfo_LoginStatus>(
    UserLoginResponseInfo_LoginStatus_descriptor(), name, value);
}
enum UserInfoResponse_UserInfoResponseStatus : int {
  UserInfoResponse_UserInfoResponseStatus_SUCCESS = 0,
  UserInfoResponse_UserInfoResponseStatus_USER_NOT_EXIST = 1,
  UserInfoResponse_UserInfoResponseStatus_UNKNOWN_FAILURE = 2,
  UserInfoResponse_UserInfoResponseStatus_UserInfoResponse_UserInfoResponseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserInfoResponse_UserInfoResponseStatus_UserInfoResponse_UserInfoResponseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserInfoResponse_UserInfoResponseStatus_IsValid(int value);
constexpr UserInfoResponse_UserInfoResponseStatus UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_MIN = UserInfoResponse_UserInfoResponseStatus_SUCCESS;
constexpr UserInfoResponse_UserInfoResponseStatus UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_MAX = UserInfoResponse_UserInfoResponseStatus_UNKNOWN_FAILURE;
constexpr int UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_ARRAYSIZE = UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInfoResponse_UserInfoResponseStatus_descriptor();
template<typename T>
inline const std::string& UserInfoResponse_UserInfoResponseStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInfoResponse_UserInfoResponseStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInfoResponse_UserInfoResponseStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInfoResponse_UserInfoResponseStatus_descriptor(), enum_t_value);
}
inline bool UserInfoResponse_UserInfoResponseStatus_Parse(
    const std::string& name, UserInfoResponse_UserInfoResponseStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInfoResponse_UserInfoResponseStatus>(
    UserInfoResponse_UserInfoResponseStatus_descriptor(), name, value);
}
enum UserInfoResponse_BadgeType : int {
  UserInfoResponse_BadgeType_BRONZE = 0,
  UserInfoResponse_BadgeType_SILVER = 1,
  UserInfoResponse_BadgeType_GOLDEN = 2,
  UserInfoResponse_BadgeType_UserInfoResponse_BadgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserInfoResponse_BadgeType_UserInfoResponse_BadgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserInfoResponse_BadgeType_IsValid(int value);
constexpr UserInfoResponse_BadgeType UserInfoResponse_BadgeType_BadgeType_MIN = UserInfoResponse_BadgeType_BRONZE;
constexpr UserInfoResponse_BadgeType UserInfoResponse_BadgeType_BadgeType_MAX = UserInfoResponse_BadgeType_GOLDEN;
constexpr int UserInfoResponse_BadgeType_BadgeType_ARRAYSIZE = UserInfoResponse_BadgeType_BadgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInfoResponse_BadgeType_descriptor();
template<typename T>
inline const std::string& UserInfoResponse_BadgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInfoResponse_BadgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInfoResponse_BadgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInfoResponse_BadgeType_descriptor(), enum_t_value);
}
inline bool UserInfoResponse_BadgeType_Parse(
    const std::string& name, UserInfoResponse_BadgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInfoResponse_BadgeType>(
    UserInfoResponse_BadgeType_descriptor(), name, value);
}
enum UserInfoResponse_UserStatus : int {
  UserInfoResponse_UserStatus_IDLE = 0,
  UserInfoResponse_UserStatus_BATTLING = 1,
  UserInfoResponse_UserStatus_OFFLINE = 2,
  UserInfoResponse_UserStatus_UNDEFINED = 3,
  UserInfoResponse_UserStatus_UserInfoResponse_UserStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserInfoResponse_UserStatus_UserInfoResponse_UserStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserInfoResponse_UserStatus_IsValid(int value);
constexpr UserInfoResponse_UserStatus UserInfoResponse_UserStatus_UserStatus_MIN = UserInfoResponse_UserStatus_IDLE;
constexpr UserInfoResponse_UserStatus UserInfoResponse_UserStatus_UserStatus_MAX = UserInfoResponse_UserStatus_UNDEFINED;
constexpr int UserInfoResponse_UserStatus_UserStatus_ARRAYSIZE = UserInfoResponse_UserStatus_UserStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInfoResponse_UserStatus_descriptor();
template<typename T>
inline const std::string& UserInfoResponse_UserStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInfoResponse_UserStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInfoResponse_UserStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInfoResponse_UserStatus_descriptor(), enum_t_value);
}
inline bool UserInfoResponse_UserStatus_Parse(
    const std::string& name, UserInfoResponse_UserStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInfoResponse_UserStatus>(
    UserInfoResponse_UserStatus_descriptor(), name, value);
}
enum UserPokemonDataRequestInfo_PokemonDataRequestType : int {
  UserPokemonDataRequestInfo_PokemonDataRequestType_ALL = 0,
  UserPokemonDataRequestInfo_PokemonDataRequestType_SPECIFIC = 1,
  UserPokemonDataRequestInfo_PokemonDataRequestType_UserPokemonDataRequestInfo_PokemonDataRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserPokemonDataRequestInfo_PokemonDataRequestType_UserPokemonDataRequestInfo_PokemonDataRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserPokemonDataRequestInfo_PokemonDataRequestType_IsValid(int value);
constexpr UserPokemonDataRequestInfo_PokemonDataRequestType UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_MIN = UserPokemonDataRequestInfo_PokemonDataRequestType_ALL;
constexpr UserPokemonDataRequestInfo_PokemonDataRequestType UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_MAX = UserPokemonDataRequestInfo_PokemonDataRequestType_SPECIFIC;
constexpr int UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_ARRAYSIZE = UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserPokemonDataRequestInfo_PokemonDataRequestType_descriptor();
template<typename T>
inline const std::string& UserPokemonDataRequestInfo_PokemonDataRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserPokemonDataRequestInfo_PokemonDataRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserPokemonDataRequestInfo_PokemonDataRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserPokemonDataRequestInfo_PokemonDataRequestType_descriptor(), enum_t_value);
}
inline bool UserPokemonDataRequestInfo_PokemonDataRequestType_Parse(
    const std::string& name, UserPokemonDataRequestInfo_PokemonDataRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserPokemonDataRequestInfo_PokemonDataRequestType>(
    UserPokemonDataRequestInfo_PokemonDataRequestType_descriptor(), name, value);
}
enum TransferPokemonResponse_TransferPokemonStatus : int {
  TransferPokemonResponse_TransferPokemonStatus_SUCCESS = 0,
  TransferPokemonResponse_TransferPokemonStatus_FAILED = 1,
  TransferPokemonResponse_TransferPokemonStatus_UNDEFINED = 2,
  TransferPokemonResponse_TransferPokemonStatus_TransferPokemonResponse_TransferPokemonStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransferPokemonResponse_TransferPokemonStatus_TransferPokemonResponse_TransferPokemonStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransferPokemonResponse_TransferPokemonStatus_IsValid(int value);
constexpr TransferPokemonResponse_TransferPokemonStatus TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_MIN = TransferPokemonResponse_TransferPokemonStatus_SUCCESS;
constexpr TransferPokemonResponse_TransferPokemonStatus TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_MAX = TransferPokemonResponse_TransferPokemonStatus_UNDEFINED;
constexpr int TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_ARRAYSIZE = TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferPokemonResponse_TransferPokemonStatus_descriptor();
template<typename T>
inline const std::string& TransferPokemonResponse_TransferPokemonStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferPokemonResponse_TransferPokemonStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferPokemonResponse_TransferPokemonStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferPokemonResponse_TransferPokemonStatus_descriptor(), enum_t_value);
}
inline bool TransferPokemonResponse_TransferPokemonStatus_Parse(
    const std::string& name, TransferPokemonResponse_TransferPokemonStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferPokemonResponse_TransferPokemonStatus>(
    TransferPokemonResponse_TransferPokemonStatus_descriptor(), name, value);
}
enum PokemonDataRequestMode : int {
  BATTLE_START = 0,
  MAIN_PAGE = 1,
  TROPHIE = 2,
  SERVER_PKM_LIST = 3,
  USER_INFO_PAGE = 4,
  PokemonDataRequestMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PokemonDataRequestMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PokemonDataRequestMode_IsValid(int value);
constexpr PokemonDataRequestMode PokemonDataRequestMode_MIN = BATTLE_START;
constexpr PokemonDataRequestMode PokemonDataRequestMode_MAX = USER_INFO_PAGE;
constexpr int PokemonDataRequestMode_ARRAYSIZE = PokemonDataRequestMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PokemonDataRequestMode_descriptor();
template<typename T>
inline const std::string& PokemonDataRequestMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PokemonDataRequestMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PokemonDataRequestMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PokemonDataRequestMode_descriptor(), enum_t_value);
}
inline bool PokemonDataRequestMode_Parse(
    const std::string& name, PokemonDataRequestMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PokemonDataRequestMode>(
    PokemonDataRequestMode_descriptor(), name, value);
}
// ===================================================================

class UserSignUpRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserSignUpRequestInfo) */ {
 public:
  inline UserSignUpRequestInfo() : UserSignUpRequestInfo(nullptr) {};
  virtual ~UserSignUpRequestInfo();

  UserSignUpRequestInfo(const UserSignUpRequestInfo& from);
  UserSignUpRequestInfo(UserSignUpRequestInfo&& from) noexcept
    : UserSignUpRequestInfo() {
    *this = ::std::move(from);
  }

  inline UserSignUpRequestInfo& operator=(const UserSignUpRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpRequestInfo& operator=(UserSignUpRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSignUpRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSignUpRequestInfo* internal_default_instance() {
    return reinterpret_cast<const UserSignUpRequestInfo*>(
               &_UserSignUpRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserSignUpRequestInfo& a, UserSignUpRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSignUpRequestInfo* New() const final {
    return CreateMaybeMessage<UserSignUpRequestInfo>(nullptr);
  }

  UserSignUpRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSignUpRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSignUpRequestInfo& from);
  void MergeFrom(const UserSignUpRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserSignUpRequestInfo";
  }
  protected:
  explicit UserSignUpRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPswFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes userPsw = 2;
  void clear_userpsw();
  const std::string& userpsw() const;
  void set_userpsw(const std::string& value);
  void set_userpsw(std::string&& value);
  void set_userpsw(const char* value);
  void set_userpsw(const void* value, size_t size);
  std::string* mutable_userpsw();
  std::string* release_userpsw();
  void set_allocated_userpsw(std::string* userpsw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userpsw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userpsw(
      std::string* userpsw);
  private:
  const std::string& _internal_userpsw() const;
  void _internal_set_userpsw(const std::string& value);
  std::string* _internal_mutable_userpsw();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserSignUpRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpsw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserSignUpResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserSignUpResponseInfo) */ {
 public:
  inline UserSignUpResponseInfo() : UserSignUpResponseInfo(nullptr) {};
  virtual ~UserSignUpResponseInfo();

  UserSignUpResponseInfo(const UserSignUpResponseInfo& from);
  UserSignUpResponseInfo(UserSignUpResponseInfo&& from) noexcept
    : UserSignUpResponseInfo() {
    *this = ::std::move(from);
  }

  inline UserSignUpResponseInfo& operator=(const UserSignUpResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpResponseInfo& operator=(UserSignUpResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSignUpResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSignUpResponseInfo* internal_default_instance() {
    return reinterpret_cast<const UserSignUpResponseInfo*>(
               &_UserSignUpResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserSignUpResponseInfo& a, UserSignUpResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSignUpResponseInfo* New() const final {
    return CreateMaybeMessage<UserSignUpResponseInfo>(nullptr);
  }

  UserSignUpResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSignUpResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSignUpResponseInfo& from);
  void MergeFrom(const UserSignUpResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserSignUpResponseInfo";
  }
  protected:
  explicit UserSignUpResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserSignUpResponseInfo_SignUpStatus SignUpStatus;
  static constexpr SignUpStatus SUCCESS =
    UserSignUpResponseInfo_SignUpStatus_SUCCESS;
  static constexpr SignUpStatus USER_ALREADY_EXISTS =
    UserSignUpResponseInfo_SignUpStatus_USER_ALREADY_EXISTS;
  static constexpr SignUpStatus USERNAME_FORMAT_ERROR =
    UserSignUpResponseInfo_SignUpStatus_USERNAME_FORMAT_ERROR;
  static constexpr SignUpStatus USERPSW_FORMAT_ERROR =
    UserSignUpResponseInfo_SignUpStatus_USERPSW_FORMAT_ERROR;
  static constexpr SignUpStatus SERVER_REFUSED =
    UserSignUpResponseInfo_SignUpStatus_SERVER_REFUSED;
  static constexpr SignUpStatus UNKNOWN_FAILURE =
    UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE;
  static inline bool SignUpStatus_IsValid(int value) {
    return UserSignUpResponseInfo_SignUpStatus_IsValid(value);
  }
  static constexpr SignUpStatus SignUpStatus_MIN =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MIN;
  static constexpr SignUpStatus SignUpStatus_MAX =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX;
  static constexpr int SignUpStatus_ARRAYSIZE =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignUpStatus_descriptor() {
    return UserSignUpResponseInfo_SignUpStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& SignUpStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignUpStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignUpStatus_Name.");
    return UserSignUpResponseInfo_SignUpStatus_Name(enum_t_value);
  }
  static inline bool SignUpStatus_Parse(const std::string& name,
      SignUpStatus* value) {
    return UserSignUpResponseInfo_SignUpStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .UserProtocol.UserSignUpResponseInfo.SignUpStatus status = 1;
  void clear_status();
  ::UserProtocol::UserSignUpResponseInfo_SignUpStatus status() const;
  void set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value);
  private:
  ::UserProtocol::UserSignUpResponseInfo_SignUpStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserSignUpResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserLoginRequestInfo) */ {
 public:
  inline UserLoginRequestInfo() : UserLoginRequestInfo(nullptr) {};
  virtual ~UserLoginRequestInfo();

  UserLoginRequestInfo(const UserLoginRequestInfo& from);
  UserLoginRequestInfo(UserLoginRequestInfo&& from) noexcept
    : UserLoginRequestInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginRequestInfo& operator=(const UserLoginRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequestInfo& operator=(UserLoginRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequestInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequestInfo*>(
               &_UserLoginRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserLoginRequestInfo& a, UserLoginRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequestInfo* New() const final {
    return CreateMaybeMessage<UserLoginRequestInfo>(nullptr);
  }

  UserLoginRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginRequestInfo& from);
  void MergeFrom(const UserLoginRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserLoginRequestInfo";
  }
  protected:
  explicit UserLoginRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPswFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes userPsw = 2;
  void clear_userpsw();
  const std::string& userpsw() const;
  void set_userpsw(const std::string& value);
  void set_userpsw(std::string&& value);
  void set_userpsw(const char* value);
  void set_userpsw(const void* value, size_t size);
  std::string* mutable_userpsw();
  std::string* release_userpsw();
  void set_allocated_userpsw(std::string* userpsw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userpsw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userpsw(
      std::string* userpsw);
  private:
  const std::string& _internal_userpsw() const;
  void _internal_set_userpsw(const std::string& value);
  std::string* _internal_mutable_userpsw();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserLoginRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpsw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserLoginResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserLoginResponseInfo) */ {
 public:
  inline UserLoginResponseInfo() : UserLoginResponseInfo(nullptr) {};
  virtual ~UserLoginResponseInfo();

  UserLoginResponseInfo(const UserLoginResponseInfo& from);
  UserLoginResponseInfo(UserLoginResponseInfo&& from) noexcept
    : UserLoginResponseInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginResponseInfo& operator=(const UserLoginResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginResponseInfo& operator=(UserLoginResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponseInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponseInfo*>(
               &_UserLoginResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserLoginResponseInfo& a, UserLoginResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponseInfo* New() const final {
    return CreateMaybeMessage<UserLoginResponseInfo>(nullptr);
  }

  UserLoginResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginResponseInfo& from);
  void MergeFrom(const UserLoginResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserLoginResponseInfo";
  }
  protected:
  explicit UserLoginResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserLoginResponseInfo_LoginStatus LoginStatus;
  static constexpr LoginStatus SUCCESS =
    UserLoginResponseInfo_LoginStatus_SUCCESS;
  static constexpr LoginStatus USER_NOT_EXISTS =
    UserLoginResponseInfo_LoginStatus_USER_NOT_EXISTS;
  static constexpr LoginStatus USERPSW_ERROR =
    UserLoginResponseInfo_LoginStatus_USERPSW_ERROR;
  static constexpr LoginStatus SERVER_REFUSED =
    UserLoginResponseInfo_LoginStatus_SERVER_REFUSED;
  static constexpr LoginStatus UNKNOWN_FAILURE =
    UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE;
  static inline bool LoginStatus_IsValid(int value) {
    return UserLoginResponseInfo_LoginStatus_IsValid(value);
  }
  static constexpr LoginStatus LoginStatus_MIN =
    UserLoginResponseInfo_LoginStatus_LoginStatus_MIN;
  static constexpr LoginStatus LoginStatus_MAX =
    UserLoginResponseInfo_LoginStatus_LoginStatus_MAX;
  static constexpr int LoginStatus_ARRAYSIZE =
    UserLoginResponseInfo_LoginStatus_LoginStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoginStatus_descriptor() {
    return UserLoginResponseInfo_LoginStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& LoginStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginStatus_Name.");
    return UserLoginResponseInfo_LoginStatus_Name(enum_t_value);
  }
  static inline bool LoginStatus_Parse(const std::string& name,
      LoginStatus* value) {
    return UserLoginResponseInfo_LoginStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .UserProtocol.UserLoginResponseInfo.LoginStatus status = 1;
  void clear_status();
  ::UserProtocol::UserLoginResponseInfo_LoginStatus status() const;
  void set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value);
  private:
  ::UserProtocol::UserLoginResponseInfo_LoginStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserLoginResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {};
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserInfoResponse) */ {
 public:
  inline UserInfoResponse() : UserInfoResponse(nullptr) {};
  virtual ~UserInfoResponse();

  UserInfoResponse(const UserInfoResponse& from);
  UserInfoResponse(UserInfoResponse&& from) noexcept
    : UserInfoResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoResponse& operator=(UserInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoResponse*>(
               &_UserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInfoResponse& a, UserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoResponse* New() const final {
    return CreateMaybeMessage<UserInfoResponse>(nullptr);
  }

  UserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoResponse& from);
  void MergeFrom(const UserInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserInfoResponse";
  }
  protected:
  explicit UserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserInfoResponse_UserInfoResponseStatus UserInfoResponseStatus;
  static constexpr UserInfoResponseStatus SUCCESS =
    UserInfoResponse_UserInfoResponseStatus_SUCCESS;
  static constexpr UserInfoResponseStatus USER_NOT_EXIST =
    UserInfoResponse_UserInfoResponseStatus_USER_NOT_EXIST;
  static constexpr UserInfoResponseStatus UNKNOWN_FAILURE =
    UserInfoResponse_UserInfoResponseStatus_UNKNOWN_FAILURE;
  static inline bool UserInfoResponseStatus_IsValid(int value) {
    return UserInfoResponse_UserInfoResponseStatus_IsValid(value);
  }
  static constexpr UserInfoResponseStatus UserInfoResponseStatus_MIN =
    UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_MIN;
  static constexpr UserInfoResponseStatus UserInfoResponseStatus_MAX =
    UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_MAX;
  static constexpr int UserInfoResponseStatus_ARRAYSIZE =
    UserInfoResponse_UserInfoResponseStatus_UserInfoResponseStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserInfoResponseStatus_descriptor() {
    return UserInfoResponse_UserInfoResponseStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& UserInfoResponseStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserInfoResponseStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserInfoResponseStatus_Name.");
    return UserInfoResponse_UserInfoResponseStatus_Name(enum_t_value);
  }
  static inline bool UserInfoResponseStatus_Parse(const std::string& name,
      UserInfoResponseStatus* value) {
    return UserInfoResponse_UserInfoResponseStatus_Parse(name, value);
  }

  typedef UserInfoResponse_BadgeType BadgeType;
  static constexpr BadgeType BRONZE =
    UserInfoResponse_BadgeType_BRONZE;
  static constexpr BadgeType SILVER =
    UserInfoResponse_BadgeType_SILVER;
  static constexpr BadgeType GOLDEN =
    UserInfoResponse_BadgeType_GOLDEN;
  static inline bool BadgeType_IsValid(int value) {
    return UserInfoResponse_BadgeType_IsValid(value);
  }
  static constexpr BadgeType BadgeType_MIN =
    UserInfoResponse_BadgeType_BadgeType_MIN;
  static constexpr BadgeType BadgeType_MAX =
    UserInfoResponse_BadgeType_BadgeType_MAX;
  static constexpr int BadgeType_ARRAYSIZE =
    UserInfoResponse_BadgeType_BadgeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BadgeType_descriptor() {
    return UserInfoResponse_BadgeType_descriptor();
  }
  template<typename T>
  static inline const std::string& BadgeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BadgeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BadgeType_Name.");
    return UserInfoResponse_BadgeType_Name(enum_t_value);
  }
  static inline bool BadgeType_Parse(const std::string& name,
      BadgeType* value) {
    return UserInfoResponse_BadgeType_Parse(name, value);
  }

  typedef UserInfoResponse_UserStatus UserStatus;
  static constexpr UserStatus IDLE =
    UserInfoResponse_UserStatus_IDLE;
  static constexpr UserStatus BATTLING =
    UserInfoResponse_UserStatus_BATTLING;
  static constexpr UserStatus OFFLINE =
    UserInfoResponse_UserStatus_OFFLINE;
  static constexpr UserStatus UNDEFINED =
    UserInfoResponse_UserStatus_UNDEFINED;
  static inline bool UserStatus_IsValid(int value) {
    return UserInfoResponse_UserStatus_IsValid(value);
  }
  static constexpr UserStatus UserStatus_MIN =
    UserInfoResponse_UserStatus_UserStatus_MIN;
  static constexpr UserStatus UserStatus_MAX =
    UserInfoResponse_UserStatus_UserStatus_MAX;
  static constexpr int UserStatus_ARRAYSIZE =
    UserInfoResponse_UserStatus_UserStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserStatus_descriptor() {
    return UserInfoResponse_UserStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& UserStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserStatus_Name.");
    return UserInfoResponse_UserStatus_Name(enum_t_value);
  }
  static inline bool UserStatus_Parse(const std::string& name,
      UserStatus* value) {
    return UserInfoResponse_UserStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPokemonIdFieldNumber = 8,
    kUserNameFieldNumber = 1,
    kTimeOfDuelFieldNumber = 2,
    kTimeOfWinsFieldNumber = 3,
    kWinRateFieldNumber = 4,
    kPkmAmountBadgeFieldNumber = 5,
    kHighLevelBadgeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kResStatusFieldNumber = 9,
  };
  // repeated int32 pokemonId = 8;
  int pokemonid_size() const;
  private:
  int _internal_pokemonid_size() const;
  public:
  void clear_pokemonid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pokemonid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pokemonid() const;
  void _internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pokemonid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pokemonid(int index) const;
  void set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pokemonid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pokemonid();

  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 timeOfDuel = 2;
  void clear_timeofduel();
  ::PROTOBUF_NAMESPACE_ID::int32 timeofduel() const;
  void set_timeofduel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeofduel() const;
  void _internal_set_timeofduel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeOfWins = 3;
  void clear_timeofwins();
  ::PROTOBUF_NAMESPACE_ID::int32 timeofwins() const;
  void set_timeofwins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeofwins() const;
  void _internal_set_timeofwins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double winRate = 4;
  void clear_winrate();
  double winrate() const;
  void set_winrate(double value);
  private:
  double _internal_winrate() const;
  void _internal_set_winrate(double value);
  public:

  // .UserProtocol.UserInfoResponse.BadgeType pkmAmountBadge = 5;
  void clear_pkmamountbadge();
  ::UserProtocol::UserInfoResponse_BadgeType pkmamountbadge() const;
  void set_pkmamountbadge(::UserProtocol::UserInfoResponse_BadgeType value);
  private:
  ::UserProtocol::UserInfoResponse_BadgeType _internal_pkmamountbadge() const;
  void _internal_set_pkmamountbadge(::UserProtocol::UserInfoResponse_BadgeType value);
  public:

  // .UserProtocol.UserInfoResponse.BadgeType highLevelBadge = 6;
  void clear_highlevelbadge();
  ::UserProtocol::UserInfoResponse_BadgeType highlevelbadge() const;
  void set_highlevelbadge(::UserProtocol::UserInfoResponse_BadgeType value);
  private:
  ::UserProtocol::UserInfoResponse_BadgeType _internal_highlevelbadge() const;
  void _internal_set_highlevelbadge(::UserProtocol::UserInfoResponse_BadgeType value);
  public:

  // .UserProtocol.UserInfoResponse.UserStatus status = 7;
  void clear_status();
  ::UserProtocol::UserInfoResponse_UserStatus status() const;
  void set_status(::UserProtocol::UserInfoResponse_UserStatus value);
  private:
  ::UserProtocol::UserInfoResponse_UserStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::UserInfoResponse_UserStatus value);
  public:

  // .UserProtocol.UserInfoResponse.UserInfoResponseStatus resStatus = 9;
  void clear_resstatus();
  ::UserProtocol::UserInfoResponse_UserInfoResponseStatus resstatus() const;
  void set_resstatus(::UserProtocol::UserInfoResponse_UserInfoResponseStatus value);
  private:
  ::UserProtocol::UserInfoResponse_UserInfoResponseStatus _internal_resstatus() const;
  void _internal_set_resstatus(::UserProtocol::UserInfoResponse_UserInfoResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pokemonid_;
  mutable std::atomic<int> _pokemonid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeofduel_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeofwins_;
  double winrate_;
  int pkmamountbadge_;
  int highlevelbadge_;
  int status_;
  int resstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserPokemonDataRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserPokemonDataRequestInfo) */ {
 public:
  inline UserPokemonDataRequestInfo() : UserPokemonDataRequestInfo(nullptr) {};
  virtual ~UserPokemonDataRequestInfo();

  UserPokemonDataRequestInfo(const UserPokemonDataRequestInfo& from);
  UserPokemonDataRequestInfo(UserPokemonDataRequestInfo&& from) noexcept
    : UserPokemonDataRequestInfo() {
    *this = ::std::move(from);
  }

  inline UserPokemonDataRequestInfo& operator=(const UserPokemonDataRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPokemonDataRequestInfo& operator=(UserPokemonDataRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPokemonDataRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPokemonDataRequestInfo* internal_default_instance() {
    return reinterpret_cast<const UserPokemonDataRequestInfo*>(
               &_UserPokemonDataRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserPokemonDataRequestInfo& a, UserPokemonDataRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPokemonDataRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPokemonDataRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPokemonDataRequestInfo* New() const final {
    return CreateMaybeMessage<UserPokemonDataRequestInfo>(nullptr);
  }

  UserPokemonDataRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPokemonDataRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPokemonDataRequestInfo& from);
  void MergeFrom(const UserPokemonDataRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPokemonDataRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserPokemonDataRequestInfo";
  }
  protected:
  explicit UserPokemonDataRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserPokemonDataRequestInfo_PokemonDataRequestType PokemonDataRequestType;
  static constexpr PokemonDataRequestType ALL =
    UserPokemonDataRequestInfo_PokemonDataRequestType_ALL;
  static constexpr PokemonDataRequestType SPECIFIC =
    UserPokemonDataRequestInfo_PokemonDataRequestType_SPECIFIC;
  static inline bool PokemonDataRequestType_IsValid(int value) {
    return UserPokemonDataRequestInfo_PokemonDataRequestType_IsValid(value);
  }
  static constexpr PokemonDataRequestType PokemonDataRequestType_MIN =
    UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_MIN;
  static constexpr PokemonDataRequestType PokemonDataRequestType_MAX =
    UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_MAX;
  static constexpr int PokemonDataRequestType_ARRAYSIZE =
    UserPokemonDataRequestInfo_PokemonDataRequestType_PokemonDataRequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PokemonDataRequestType_descriptor() {
    return UserPokemonDataRequestInfo_PokemonDataRequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& PokemonDataRequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PokemonDataRequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PokemonDataRequestType_Name.");
    return UserPokemonDataRequestInfo_PokemonDataRequestType_Name(enum_t_value);
  }
  static inline bool PokemonDataRequestType_Parse(const std::string& name,
      PokemonDataRequestType* value) {
    return UserPokemonDataRequestInfo_PokemonDataRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPokemonIdFieldNumber = 2,
    kUserNameFieldNumber = 1,
    kReqTypeFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // repeated int32 pokemonId = 2;
  int pokemonid_size() const;
  private:
  int _internal_pokemonid_size() const;
  public:
  void clear_pokemonid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pokemonid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pokemonid() const;
  void _internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pokemonid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pokemonid(int index) const;
  void set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pokemonid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pokemonid();

  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .UserProtocol.UserPokemonDataRequestInfo.PokemonDataRequestType reqType = 3;
  void clear_reqtype();
  ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType reqtype() const;
  void set_reqtype(::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType value);
  private:
  ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType _internal_reqtype() const;
  void _internal_set_reqtype(::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType value);
  public:

  // .UserProtocol.PokemonDataRequestMode mode = 4;
  void clear_mode();
  ::UserProtocol::PokemonDataRequestMode mode() const;
  void set_mode(::UserProtocol::PokemonDataRequestMode value);
  private:
  ::UserProtocol::PokemonDataRequestMode _internal_mode() const;
  void _internal_set_mode(::UserProtocol::PokemonDataRequestMode value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserPokemonDataRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pokemonid_;
  mutable std::atomic<int> _pokemonid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int reqtype_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class PokemonInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.PokemonInfo) */ {
 public:
  inline PokemonInfo() : PokemonInfo(nullptr) {};
  virtual ~PokemonInfo();

  PokemonInfo(const PokemonInfo& from);
  PokemonInfo(PokemonInfo&& from) noexcept
    : PokemonInfo() {
    *this = ::std::move(from);
  }

  inline PokemonInfo& operator=(const PokemonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PokemonInfo& operator=(PokemonInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PokemonInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PokemonInfo* internal_default_instance() {
    return reinterpret_cast<const PokemonInfo*>(
               &_PokemonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PokemonInfo& a, PokemonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PokemonInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PokemonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PokemonInfo* New() const final {
    return CreateMaybeMessage<PokemonInfo>(nullptr);
  }

  PokemonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PokemonInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PokemonInfo& from);
  void MergeFrom(const PokemonInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PokemonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.PokemonInfo";
  }
  protected:
  explicit PokemonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescFieldNumber = 12,
    kSkill1FieldNumber = 13,
    kSkill2FieldNumber = 14,
    kSkill3FieldNumber = 15,
    kSkill4FieldNumber = 16,
    kSkill1DescFieldNumber = 17,
    kSkill2DescFieldNumber = 18,
    kSkill3DescFieldNumber = 19,
    kSkill4DescFieldNumber = 20,
    kIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kLevelFieldNumber = 4,
    kTypeFieldNumber = 5,
    kEXPFieldNumber = 6,
    kAttrFieldNumber = 7,
    kATKFieldNumber = 8,
    kDEFFieldNumber = 9,
    kHPFieldNumber = 10,
    kSPDFieldNumber = 11,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 12;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // bytes skill_1 = 13;
  void clear_skill_1();
  const std::string& skill_1() const;
  void set_skill_1(const std::string& value);
  void set_skill_1(std::string&& value);
  void set_skill_1(const char* value);
  void set_skill_1(const void* value, size_t size);
  std::string* mutable_skill_1();
  std::string* release_skill_1();
  void set_allocated_skill_1(std::string* skill_1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_1(
      std::string* skill_1);
  private:
  const std::string& _internal_skill_1() const;
  void _internal_set_skill_1(const std::string& value);
  std::string* _internal_mutable_skill_1();
  public:

  // bytes skill_2 = 14;
  void clear_skill_2();
  const std::string& skill_2() const;
  void set_skill_2(const std::string& value);
  void set_skill_2(std::string&& value);
  void set_skill_2(const char* value);
  void set_skill_2(const void* value, size_t size);
  std::string* mutable_skill_2();
  std::string* release_skill_2();
  void set_allocated_skill_2(std::string* skill_2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_2(
      std::string* skill_2);
  private:
  const std::string& _internal_skill_2() const;
  void _internal_set_skill_2(const std::string& value);
  std::string* _internal_mutable_skill_2();
  public:

  // bytes skill_3 = 15;
  void clear_skill_3();
  const std::string& skill_3() const;
  void set_skill_3(const std::string& value);
  void set_skill_3(std::string&& value);
  void set_skill_3(const char* value);
  void set_skill_3(const void* value, size_t size);
  std::string* mutable_skill_3();
  std::string* release_skill_3();
  void set_allocated_skill_3(std::string* skill_3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_3(
      std::string* skill_3);
  private:
  const std::string& _internal_skill_3() const;
  void _internal_set_skill_3(const std::string& value);
  std::string* _internal_mutable_skill_3();
  public:

  // bytes skill_4 = 16;
  void clear_skill_4();
  const std::string& skill_4() const;
  void set_skill_4(const std::string& value);
  void set_skill_4(std::string&& value);
  void set_skill_4(const char* value);
  void set_skill_4(const void* value, size_t size);
  std::string* mutable_skill_4();
  std::string* release_skill_4();
  void set_allocated_skill_4(std::string* skill_4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_4(
      std::string* skill_4);
  private:
  const std::string& _internal_skill_4() const;
  void _internal_set_skill_4(const std::string& value);
  std::string* _internal_mutable_skill_4();
  public:

  // bytes skill_1_desc = 17;
  void clear_skill_1_desc();
  const std::string& skill_1_desc() const;
  void set_skill_1_desc(const std::string& value);
  void set_skill_1_desc(std::string&& value);
  void set_skill_1_desc(const char* value);
  void set_skill_1_desc(const void* value, size_t size);
  std::string* mutable_skill_1_desc();
  std::string* release_skill_1_desc();
  void set_allocated_skill_1_desc(std::string* skill_1_desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_1_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_1_desc(
      std::string* skill_1_desc);
  private:
  const std::string& _internal_skill_1_desc() const;
  void _internal_set_skill_1_desc(const std::string& value);
  std::string* _internal_mutable_skill_1_desc();
  public:

  // bytes skill_2_desc = 18;
  void clear_skill_2_desc();
  const std::string& skill_2_desc() const;
  void set_skill_2_desc(const std::string& value);
  void set_skill_2_desc(std::string&& value);
  void set_skill_2_desc(const char* value);
  void set_skill_2_desc(const void* value, size_t size);
  std::string* mutable_skill_2_desc();
  std::string* release_skill_2_desc();
  void set_allocated_skill_2_desc(std::string* skill_2_desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_2_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_2_desc(
      std::string* skill_2_desc);
  private:
  const std::string& _internal_skill_2_desc() const;
  void _internal_set_skill_2_desc(const std::string& value);
  std::string* _internal_mutable_skill_2_desc();
  public:

  // bytes skill_3_desc = 19;
  void clear_skill_3_desc();
  const std::string& skill_3_desc() const;
  void set_skill_3_desc(const std::string& value);
  void set_skill_3_desc(std::string&& value);
  void set_skill_3_desc(const char* value);
  void set_skill_3_desc(const void* value, size_t size);
  std::string* mutable_skill_3_desc();
  std::string* release_skill_3_desc();
  void set_allocated_skill_3_desc(std::string* skill_3_desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_3_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_3_desc(
      std::string* skill_3_desc);
  private:
  const std::string& _internal_skill_3_desc() const;
  void _internal_set_skill_3_desc(const std::string& value);
  std::string* _internal_mutable_skill_3_desc();
  public:

  // bytes skill_4_desc = 20;
  void clear_skill_4_desc();
  const std::string& skill_4_desc() const;
  void set_skill_4_desc(const std::string& value);
  void set_skill_4_desc(std::string&& value);
  void set_skill_4_desc(const char* value);
  void set_skill_4_desc(const void* value, size_t size);
  std::string* mutable_skill_4_desc();
  std::string* release_skill_4_desc();
  void set_allocated_skill_4_desc(std::string* skill_4_desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill_4_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_4_desc(
      std::string* skill_4_desc);
  private:
  const std::string& _internal_skill_4_desc() const;
  void _internal_set_skill_4_desc(const std::string& value);
  std::string* _internal_mutable_skill_4_desc();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 typeId = 2;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int32 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 EXP = 6;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attr = 7;
  void clear_attr();
  ::PROTOBUF_NAMESPACE_ID::int32 attr() const;
  void set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attr() const;
  void _internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ATK = 8;
  void clear_atk();
  ::PROTOBUF_NAMESPACE_ID::int32 atk() const;
  void set_atk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atk() const;
  void _internal_set_atk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DEF = 9;
  void clear_def();
  ::PROTOBUF_NAMESPACE_ID::int32 def() const;
  void set_def(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_def() const;
  void _internal_set_def(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HP = 10;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SPD = 11;
  void clear_spd();
  ::PROTOBUF_NAMESPACE_ID::int32 spd() const;
  void set_spd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spd() const;
  void _internal_set_spd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.PokemonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_1_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_2_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_3_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_4_desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeid__;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 attr_;
  ::PROTOBUF_NAMESPACE_ID::int32 atk_;
  ::PROTOBUF_NAMESPACE_ID::int32 def_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 spd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserPokemonDataResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserPokemonDataResponseInfo) */ {
 public:
  inline UserPokemonDataResponseInfo() : UserPokemonDataResponseInfo(nullptr) {};
  virtual ~UserPokemonDataResponseInfo();

  UserPokemonDataResponseInfo(const UserPokemonDataResponseInfo& from);
  UserPokemonDataResponseInfo(UserPokemonDataResponseInfo&& from) noexcept
    : UserPokemonDataResponseInfo() {
    *this = ::std::move(from);
  }

  inline UserPokemonDataResponseInfo& operator=(const UserPokemonDataResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPokemonDataResponseInfo& operator=(UserPokemonDataResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPokemonDataResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPokemonDataResponseInfo* internal_default_instance() {
    return reinterpret_cast<const UserPokemonDataResponseInfo*>(
               &_UserPokemonDataResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserPokemonDataResponseInfo& a, UserPokemonDataResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPokemonDataResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPokemonDataResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPokemonDataResponseInfo* New() const final {
    return CreateMaybeMessage<UserPokemonDataResponseInfo>(nullptr);
  }

  UserPokemonDataResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPokemonDataResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPokemonDataResponseInfo& from);
  void MergeFrom(const UserPokemonDataResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPokemonDataResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserPokemonDataResponseInfo";
  }
  protected:
  explicit UserPokemonDataResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkmDataFieldNumber = 3,
    kUserNameFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // repeated .UserProtocol.PokemonInfo pkmData = 3;
  int pkmdata_size() const;
  private:
  int _internal_pkmdata_size() const;
  public:
  void clear_pkmdata();
  ::UserProtocol::PokemonInfo* mutable_pkmdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::PokemonInfo >*
      mutable_pkmdata();
  private:
  const ::UserProtocol::PokemonInfo& _internal_pkmdata(int index) const;
  ::UserProtocol::PokemonInfo* _internal_add_pkmdata();
  public:
  const ::UserProtocol::PokemonInfo& pkmdata(int index) const;
  ::UserProtocol::PokemonInfo* add_pkmdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::PokemonInfo >&
      pkmdata() const;

  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .UserProtocol.PokemonDataRequestMode mode = 2;
  void clear_mode();
  ::UserProtocol::PokemonDataRequestMode mode() const;
  void set_mode(::UserProtocol::PokemonDataRequestMode value);
  private:
  ::UserProtocol::PokemonDataRequestMode _internal_mode() const;
  void _internal_set_mode(::UserProtocol::PokemonDataRequestMode value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserPokemonDataResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::PokemonInfo > pkmdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class OnlineUserListRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.OnlineUserListRequestInfo) */ {
 public:
  inline OnlineUserListRequestInfo() : OnlineUserListRequestInfo(nullptr) {};
  virtual ~OnlineUserListRequestInfo();

  OnlineUserListRequestInfo(const OnlineUserListRequestInfo& from);
  OnlineUserListRequestInfo(OnlineUserListRequestInfo&& from) noexcept
    : OnlineUserListRequestInfo() {
    *this = ::std::move(from);
  }

  inline OnlineUserListRequestInfo& operator=(const OnlineUserListRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineUserListRequestInfo& operator=(OnlineUserListRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineUserListRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineUserListRequestInfo* internal_default_instance() {
    return reinterpret_cast<const OnlineUserListRequestInfo*>(
               &_OnlineUserListRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OnlineUserListRequestInfo& a, OnlineUserListRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineUserListRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineUserListRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineUserListRequestInfo* New() const final {
    return CreateMaybeMessage<OnlineUserListRequestInfo>(nullptr);
  }

  OnlineUserListRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineUserListRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineUserListRequestInfo& from);
  void MergeFrom(const OnlineUserListRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineUserListRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.OnlineUserListRequestInfo";
  }
  protected:
  explicit OnlineUserListRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.OnlineUserListRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserStatusInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserStatusInfo) */ {
 public:
  inline UserStatusInfo() : UserStatusInfo(nullptr) {};
  virtual ~UserStatusInfo();

  UserStatusInfo(const UserStatusInfo& from);
  UserStatusInfo(UserStatusInfo&& from) noexcept
    : UserStatusInfo() {
    *this = ::std::move(from);
  }

  inline UserStatusInfo& operator=(const UserStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStatusInfo& operator=(UserStatusInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserStatusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStatusInfo* internal_default_instance() {
    return reinterpret_cast<const UserStatusInfo*>(
               &_UserStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserStatusInfo& a, UserStatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStatusInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserStatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserStatusInfo* New() const final {
    return CreateMaybeMessage<UserStatusInfo>(nullptr);
  }

  UserStatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserStatusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserStatusInfo& from);
  void MergeFrom(const UserStatusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStatusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserStatusInfo";
  }
  protected:
  explicit UserStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserStatusFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 userStatus = 2;
  void clear_userstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 userstatus() const;
  void set_userstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userstatus() const;
  void _internal_set_userstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserStatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 userstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class OnlineUserListResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.OnlineUserListResponseInfo) */ {
 public:
  inline OnlineUserListResponseInfo() : OnlineUserListResponseInfo(nullptr) {};
  virtual ~OnlineUserListResponseInfo();

  OnlineUserListResponseInfo(const OnlineUserListResponseInfo& from);
  OnlineUserListResponseInfo(OnlineUserListResponseInfo&& from) noexcept
    : OnlineUserListResponseInfo() {
    *this = ::std::move(from);
  }

  inline OnlineUserListResponseInfo& operator=(const OnlineUserListResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineUserListResponseInfo& operator=(OnlineUserListResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineUserListResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineUserListResponseInfo* internal_default_instance() {
    return reinterpret_cast<const OnlineUserListResponseInfo*>(
               &_OnlineUserListResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OnlineUserListResponseInfo& a, OnlineUserListResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineUserListResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineUserListResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineUserListResponseInfo* New() const final {
    return CreateMaybeMessage<OnlineUserListResponseInfo>(nullptr);
  }

  OnlineUserListResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineUserListResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineUserListResponseInfo& from);
  void MergeFrom(const OnlineUserListResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineUserListResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.OnlineUserListResponseInfo";
  }
  protected:
  explicit OnlineUserListResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 1,
  };
  // repeated .UserProtocol.UserStatusInfo userList = 1;
  int userlist_size() const;
  private:
  int _internal_userlist_size() const;
  public:
  void clear_userlist();
  ::UserProtocol::UserStatusInfo* mutable_userlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::UserStatusInfo >*
      mutable_userlist();
  private:
  const ::UserProtocol::UserStatusInfo& _internal_userlist(int index) const;
  ::UserProtocol::UserStatusInfo* _internal_add_userlist();
  public:
  const ::UserProtocol::UserStatusInfo& userlist(int index) const;
  ::UserProtocol::UserStatusInfo* add_userlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::UserStatusInfo >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:UserProtocol.OnlineUserListResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::UserStatusInfo > userlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class TransferPokemonRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.TransferPokemonRequest) */ {
 public:
  inline TransferPokemonRequest() : TransferPokemonRequest(nullptr) {};
  virtual ~TransferPokemonRequest();

  TransferPokemonRequest(const TransferPokemonRequest& from);
  TransferPokemonRequest(TransferPokemonRequest&& from) noexcept
    : TransferPokemonRequest() {
    *this = ::std::move(from);
  }

  inline TransferPokemonRequest& operator=(const TransferPokemonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferPokemonRequest& operator=(TransferPokemonRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferPokemonRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferPokemonRequest* internal_default_instance() {
    return reinterpret_cast<const TransferPokemonRequest*>(
               &_TransferPokemonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransferPokemonRequest& a, TransferPokemonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferPokemonRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferPokemonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferPokemonRequest* New() const final {
    return CreateMaybeMessage<TransferPokemonRequest>(nullptr);
  }

  TransferPokemonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferPokemonRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferPokemonRequest& from);
  void MergeFrom(const TransferPokemonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferPokemonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.TransferPokemonRequest";
  }
  protected:
  explicit TransferPokemonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserFieldNumber = 1,
    kDestUserFieldNumber = 2,
    kPkmIdFieldNumber = 3,
  };
  // bytes fromUser = 1;
  void clear_fromuser();
  const std::string& fromuser() const;
  void set_fromuser(const std::string& value);
  void set_fromuser(std::string&& value);
  void set_fromuser(const char* value);
  void set_fromuser(const void* value, size_t size);
  std::string* mutable_fromuser();
  std::string* release_fromuser();
  void set_allocated_fromuser(std::string* fromuser);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fromuser();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fromuser(
      std::string* fromuser);
  private:
  const std::string& _internal_fromuser() const;
  void _internal_set_fromuser(const std::string& value);
  std::string* _internal_mutable_fromuser();
  public:

  // bytes destUser = 2;
  void clear_destuser();
  const std::string& destuser() const;
  void set_destuser(const std::string& value);
  void set_destuser(std::string&& value);
  void set_destuser(const char* value);
  void set_destuser(const void* value, size_t size);
  std::string* mutable_destuser();
  std::string* release_destuser();
  void set_allocated_destuser(std::string* destuser);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destuser();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destuser(
      std::string* destuser);
  private:
  const std::string& _internal_destuser() const;
  void _internal_set_destuser(const std::string& value);
  std::string* _internal_mutable_destuser();
  public:

  // int32 pkmId = 3;
  void clear_pkmid();
  ::PROTOBUF_NAMESPACE_ID::int32 pkmid() const;
  void set_pkmid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pkmid() const;
  void _internal_set_pkmid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.TransferPokemonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromuser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 pkmid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class TransferPokemonResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.TransferPokemonResponse) */ {
 public:
  inline TransferPokemonResponse() : TransferPokemonResponse(nullptr) {};
  virtual ~TransferPokemonResponse();

  TransferPokemonResponse(const TransferPokemonResponse& from);
  TransferPokemonResponse(TransferPokemonResponse&& from) noexcept
    : TransferPokemonResponse() {
    *this = ::std::move(from);
  }

  inline TransferPokemonResponse& operator=(const TransferPokemonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferPokemonResponse& operator=(TransferPokemonResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferPokemonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferPokemonResponse* internal_default_instance() {
    return reinterpret_cast<const TransferPokemonResponse*>(
               &_TransferPokemonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TransferPokemonResponse& a, TransferPokemonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferPokemonResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferPokemonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferPokemonResponse* New() const final {
    return CreateMaybeMessage<TransferPokemonResponse>(nullptr);
  }

  TransferPokemonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferPokemonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferPokemonResponse& from);
  void MergeFrom(const TransferPokemonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferPokemonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.TransferPokemonResponse";
  }
  protected:
  explicit TransferPokemonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransferPokemonResponse_TransferPokemonStatus TransferPokemonStatus;
  static constexpr TransferPokemonStatus SUCCESS =
    TransferPokemonResponse_TransferPokemonStatus_SUCCESS;
  static constexpr TransferPokemonStatus FAILED =
    TransferPokemonResponse_TransferPokemonStatus_FAILED;
  static constexpr TransferPokemonStatus UNDEFINED =
    TransferPokemonResponse_TransferPokemonStatus_UNDEFINED;
  static inline bool TransferPokemonStatus_IsValid(int value) {
    return TransferPokemonResponse_TransferPokemonStatus_IsValid(value);
  }
  static constexpr TransferPokemonStatus TransferPokemonStatus_MIN =
    TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_MIN;
  static constexpr TransferPokemonStatus TransferPokemonStatus_MAX =
    TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_MAX;
  static constexpr int TransferPokemonStatus_ARRAYSIZE =
    TransferPokemonResponse_TransferPokemonStatus_TransferPokemonStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransferPokemonStatus_descriptor() {
    return TransferPokemonResponse_TransferPokemonStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TransferPokemonStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransferPokemonStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransferPokemonStatus_Name.");
    return TransferPokemonResponse_TransferPokemonStatus_Name(enum_t_value);
  }
  static inline bool TransferPokemonStatus_Parse(const std::string& name,
      TransferPokemonStatus* value) {
    return TransferPokemonResponse_TransferPokemonStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .UserProtocol.TransferPokemonResponse.TransferPokemonStatus status = 1;
  void clear_status();
  ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus status() const;
  void set_status(::UserProtocol::TransferPokemonResponse_TransferPokemonStatus value);
  private:
  ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::TransferPokemonResponse_TransferPokemonStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.TransferPokemonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserSignUpRequestInfo

// bytes userName = 1;
inline void UserSignUpRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSignUpRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpRequestInfo.userName)
  return _internal_username();
}
inline void UserSignUpRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserSignUpRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserSignUpRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void UserSignUpRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSignUpRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserSignUpRequestInfo.userName)
}
inline void UserSignUpRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserSignUpRequestInfo.userName)
}
inline void UserSignUpRequestInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSignUpRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserSignUpRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSignUpRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserSignUpRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserSignUpRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserSignUpRequestInfo.userName)
}

// bytes userPsw = 2;
inline void UserSignUpRequestInfo::clear_userpsw() {
  userpsw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSignUpRequestInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpRequestInfo.userPsw)
  return _internal_userpsw();
}
inline void UserSignUpRequestInfo::set_userpsw(const std::string& value) {
  _internal_set_userpsw(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::mutable_userpsw() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserSignUpRequestInfo.userPsw)
  return _internal_mutable_userpsw();
}
inline const std::string& UserSignUpRequestInfo::_internal_userpsw() const {
  return userpsw_.Get();
}
inline void UserSignUpRequestInfo::_internal_set_userpsw(const std::string& value) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSignUpRequestInfo::set_userpsw(std::string&& value) {
  
  userpsw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline void UserSignUpRequestInfo::set_userpsw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline void UserSignUpRequestInfo::set_userpsw(const void* value,
    size_t size) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::_internal_mutable_userpsw() {
  
  return userpsw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSignUpRequestInfo::release_userpsw() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserSignUpRequestInfo.userPsw)
  return userpsw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSignUpRequestInfo::set_allocated_userpsw(std::string* userpsw) {
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpsw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::unsafe_arena_release_userpsw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserSignUpRequestInfo.userPsw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userpsw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserSignUpRequestInfo::unsafe_arena_set_allocated_userpsw(
    std::string* userpsw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userpsw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserSignUpRequestInfo.userPsw)
}

// -------------------------------------------------------------------

// UserSignUpResponseInfo

// .UserProtocol.UserSignUpResponseInfo.SignUpStatus status = 1;
inline void UserSignUpResponseInfo::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo::_internal_status() const {
  return static_cast< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus >(status_);
}
inline ::UserProtocol::UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpResponseInfo.status)
  return _internal_status();
}
inline void UserSignUpResponseInfo::_internal_set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value) {
  
  status_ = value;
}
inline void UserSignUpResponseInfo::set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpResponseInfo.status)
}

// -------------------------------------------------------------------

// UserLoginRequestInfo

// bytes userName = 1;
inline void UserLoginRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginRequestInfo.userName)
  return _internal_username();
}
inline void UserLoginRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserLoginRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserLoginRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void UserLoginRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserLoginRequestInfo.userName)
}
inline void UserLoginRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserLoginRequestInfo.userName)
}
inline void UserLoginRequestInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserLoginRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserLoginRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserLoginRequestInfo.userName)
}

// bytes userPsw = 2;
inline void UserLoginRequestInfo::clear_userpsw() {
  userpsw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRequestInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginRequestInfo.userPsw)
  return _internal_userpsw();
}
inline void UserLoginRequestInfo::set_userpsw(const std::string& value) {
  _internal_set_userpsw(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::mutable_userpsw() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserLoginRequestInfo.userPsw)
  return _internal_mutable_userpsw();
}
inline const std::string& UserLoginRequestInfo::_internal_userpsw() const {
  return userpsw_.Get();
}
inline void UserLoginRequestInfo::_internal_set_userpsw(const std::string& value) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRequestInfo::set_userpsw(std::string&& value) {
  
  userpsw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline void UserLoginRequestInfo::set_userpsw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline void UserLoginRequestInfo::set_userpsw(const void* value,
    size_t size) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::_internal_mutable_userpsw() {
  
  return userpsw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRequestInfo::release_userpsw() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserLoginRequestInfo.userPsw)
  return userpsw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRequestInfo::set_allocated_userpsw(std::string* userpsw) {
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpsw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::unsafe_arena_release_userpsw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserLoginRequestInfo.userPsw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userpsw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRequestInfo::unsafe_arena_set_allocated_userpsw(
    std::string* userpsw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userpsw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserLoginRequestInfo.userPsw)
}

// -------------------------------------------------------------------

// UserLoginResponseInfo

// .UserProtocol.UserLoginResponseInfo.LoginStatus status = 1;
inline void UserLoginResponseInfo::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::UserLoginResponseInfo_LoginStatus UserLoginResponseInfo::_internal_status() const {
  return static_cast< ::UserProtocol::UserLoginResponseInfo_LoginStatus >(status_);
}
inline ::UserProtocol::UserLoginResponseInfo_LoginStatus UserLoginResponseInfo::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginResponseInfo.status)
  return _internal_status();
}
inline void UserLoginResponseInfo::_internal_set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value) {
  
  status_ = value;
}
inline void UserLoginResponseInfo::set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginResponseInfo.status)
}

// -------------------------------------------------------------------

// UserInfoRequest

// bytes userName = 1;
inline void UserInfoRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoRequest.userName)
  return _internal_username();
}
inline void UserInfoRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoRequest.userName)
}
inline std::string* UserInfoRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserInfoRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& UserInfoRequest::_internal_username() const {
  return username_.Get();
}
inline void UserInfoRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserInfoRequest.userName)
}
inline void UserInfoRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserInfoRequest.userName)
}
inline void UserInfoRequest::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserInfoRequest.userName)
}
inline std::string* UserInfoRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRequest::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserInfoRequest.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserInfoRequest.userName)
}
inline std::string* UserInfoRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserInfoRequest.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserInfoRequest.userName)
}

// -------------------------------------------------------------------

// UserInfoResponse

// bytes userName = 1;
inline void UserInfoResponse::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoResponse::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.userName)
  return _internal_username();
}
inline void UserInfoResponse::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.userName)
}
inline std::string* UserInfoResponse::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserInfoResponse.userName)
  return _internal_mutable_username();
}
inline const std::string& UserInfoResponse::_internal_username() const {
  return username_.Get();
}
inline void UserInfoResponse::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoResponse::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserInfoResponse.userName)
}
inline void UserInfoResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserInfoResponse.userName)
}
inline void UserInfoResponse::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserInfoResponse.userName)
}
inline std::string* UserInfoResponse::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoResponse::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserInfoResponse.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserInfoResponse.userName)
}
inline std::string* UserInfoResponse::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserInfoResponse.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoResponse::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserInfoResponse.userName)
}

// int32 timeOfDuel = 2;
inline void UserInfoResponse::clear_timeofduel() {
  timeofduel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::_internal_timeofduel() const {
  return timeofduel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::timeofduel() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.timeOfDuel)
  return _internal_timeofduel();
}
inline void UserInfoResponse::_internal_set_timeofduel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeofduel_ = value;
}
inline void UserInfoResponse::set_timeofduel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeofduel(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.timeOfDuel)
}

// int32 timeOfWins = 3;
inline void UserInfoResponse::clear_timeofwins() {
  timeofwins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::_internal_timeofwins() const {
  return timeofwins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::timeofwins() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.timeOfWins)
  return _internal_timeofwins();
}
inline void UserInfoResponse::_internal_set_timeofwins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeofwins_ = value;
}
inline void UserInfoResponse::set_timeofwins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeofwins(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.timeOfWins)
}

// double winRate = 4;
inline void UserInfoResponse::clear_winrate() {
  winrate_ = 0;
}
inline double UserInfoResponse::_internal_winrate() const {
  return winrate_;
}
inline double UserInfoResponse::winrate() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.winRate)
  return _internal_winrate();
}
inline void UserInfoResponse::_internal_set_winrate(double value) {
  
  winrate_ = value;
}
inline void UserInfoResponse::set_winrate(double value) {
  _internal_set_winrate(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.winRate)
}

// .UserProtocol.UserInfoResponse.BadgeType pkmAmountBadge = 5;
inline void UserInfoResponse::clear_pkmamountbadge() {
  pkmamountbadge_ = 0;
}
inline ::UserProtocol::UserInfoResponse_BadgeType UserInfoResponse::_internal_pkmamountbadge() const {
  return static_cast< ::UserProtocol::UserInfoResponse_BadgeType >(pkmamountbadge_);
}
inline ::UserProtocol::UserInfoResponse_BadgeType UserInfoResponse::pkmamountbadge() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.pkmAmountBadge)
  return _internal_pkmamountbadge();
}
inline void UserInfoResponse::_internal_set_pkmamountbadge(::UserProtocol::UserInfoResponse_BadgeType value) {
  
  pkmamountbadge_ = value;
}
inline void UserInfoResponse::set_pkmamountbadge(::UserProtocol::UserInfoResponse_BadgeType value) {
  _internal_set_pkmamountbadge(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.pkmAmountBadge)
}

// .UserProtocol.UserInfoResponse.BadgeType highLevelBadge = 6;
inline void UserInfoResponse::clear_highlevelbadge() {
  highlevelbadge_ = 0;
}
inline ::UserProtocol::UserInfoResponse_BadgeType UserInfoResponse::_internal_highlevelbadge() const {
  return static_cast< ::UserProtocol::UserInfoResponse_BadgeType >(highlevelbadge_);
}
inline ::UserProtocol::UserInfoResponse_BadgeType UserInfoResponse::highlevelbadge() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.highLevelBadge)
  return _internal_highlevelbadge();
}
inline void UserInfoResponse::_internal_set_highlevelbadge(::UserProtocol::UserInfoResponse_BadgeType value) {
  
  highlevelbadge_ = value;
}
inline void UserInfoResponse::set_highlevelbadge(::UserProtocol::UserInfoResponse_BadgeType value) {
  _internal_set_highlevelbadge(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.highLevelBadge)
}

// .UserProtocol.UserInfoResponse.UserStatus status = 7;
inline void UserInfoResponse::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::UserInfoResponse_UserStatus UserInfoResponse::_internal_status() const {
  return static_cast< ::UserProtocol::UserInfoResponse_UserStatus >(status_);
}
inline ::UserProtocol::UserInfoResponse_UserStatus UserInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.status)
  return _internal_status();
}
inline void UserInfoResponse::_internal_set_status(::UserProtocol::UserInfoResponse_UserStatus value) {
  
  status_ = value;
}
inline void UserInfoResponse::set_status(::UserProtocol::UserInfoResponse_UserStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.status)
}

// repeated int32 pokemonId = 8;
inline int UserInfoResponse::_internal_pokemonid_size() const {
  return pokemonid_.size();
}
inline int UserInfoResponse::pokemonid_size() const {
  return _internal_pokemonid_size();
}
inline void UserInfoResponse::clear_pokemonid() {
  pokemonid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::_internal_pokemonid(int index) const {
  return pokemonid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::pokemonid(int index) const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.pokemonId)
  return _internal_pokemonid(index);
}
inline void UserInfoResponse::set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.pokemonId)
}
inline void UserInfoResponse::_internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Add(value);
}
inline void UserInfoResponse::add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pokemonid(value);
  // @@protoc_insertion_point(field_add:UserProtocol.UserInfoResponse.pokemonId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserInfoResponse::_internal_pokemonid() const {
  return pokemonid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserInfoResponse::pokemonid() const {
  // @@protoc_insertion_point(field_list:UserProtocol.UserInfoResponse.pokemonId)
  return _internal_pokemonid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserInfoResponse::_internal_mutable_pokemonid() {
  return &pokemonid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserInfoResponse::mutable_pokemonid() {
  // @@protoc_insertion_point(field_mutable_list:UserProtocol.UserInfoResponse.pokemonId)
  return _internal_mutable_pokemonid();
}

// .UserProtocol.UserInfoResponse.UserInfoResponseStatus resStatus = 9;
inline void UserInfoResponse::clear_resstatus() {
  resstatus_ = 0;
}
inline ::UserProtocol::UserInfoResponse_UserInfoResponseStatus UserInfoResponse::_internal_resstatus() const {
  return static_cast< ::UserProtocol::UserInfoResponse_UserInfoResponseStatus >(resstatus_);
}
inline ::UserProtocol::UserInfoResponse_UserInfoResponseStatus UserInfoResponse::resstatus() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfoResponse.resStatus)
  return _internal_resstatus();
}
inline void UserInfoResponse::_internal_set_resstatus(::UserProtocol::UserInfoResponse_UserInfoResponseStatus value) {
  
  resstatus_ = value;
}
inline void UserInfoResponse::set_resstatus(::UserProtocol::UserInfoResponse_UserInfoResponseStatus value) {
  _internal_set_resstatus(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfoResponse.resStatus)
}

// -------------------------------------------------------------------

// UserPokemonDataRequestInfo

// bytes userName = 1;
inline void UserPokemonDataRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPokemonDataRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataRequestInfo.userName)
  return _internal_username();
}
inline void UserPokemonDataRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataRequestInfo.userName)
}
inline std::string* UserPokemonDataRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserPokemonDataRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserPokemonDataRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void UserPokemonDataRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPokemonDataRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserPokemonDataRequestInfo.userName)
}
inline void UserPokemonDataRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserPokemonDataRequestInfo.userName)
}
inline void UserPokemonDataRequestInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserPokemonDataRequestInfo.userName)
}
inline std::string* UserPokemonDataRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPokemonDataRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserPokemonDataRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPokemonDataRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserPokemonDataRequestInfo.userName)
}
inline std::string* UserPokemonDataRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserPokemonDataRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserPokemonDataRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserPokemonDataRequestInfo.userName)
}

// repeated int32 pokemonId = 2;
inline int UserPokemonDataRequestInfo::_internal_pokemonid_size() const {
  return pokemonid_.size();
}
inline int UserPokemonDataRequestInfo::pokemonid_size() const {
  return _internal_pokemonid_size();
}
inline void UserPokemonDataRequestInfo::clear_pokemonid() {
  pokemonid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserPokemonDataRequestInfo::_internal_pokemonid(int index) const {
  return pokemonid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserPokemonDataRequestInfo::pokemonid(int index) const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataRequestInfo.pokemonId)
  return _internal_pokemonid(index);
}
inline void UserPokemonDataRequestInfo::set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataRequestInfo.pokemonId)
}
inline void UserPokemonDataRequestInfo::_internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Add(value);
}
inline void UserPokemonDataRequestInfo::add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pokemonid(value);
  // @@protoc_insertion_point(field_add:UserProtocol.UserPokemonDataRequestInfo.pokemonId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserPokemonDataRequestInfo::_internal_pokemonid() const {
  return pokemonid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserPokemonDataRequestInfo::pokemonid() const {
  // @@protoc_insertion_point(field_list:UserProtocol.UserPokemonDataRequestInfo.pokemonId)
  return _internal_pokemonid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserPokemonDataRequestInfo::_internal_mutable_pokemonid() {
  return &pokemonid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserPokemonDataRequestInfo::mutable_pokemonid() {
  // @@protoc_insertion_point(field_mutable_list:UserProtocol.UserPokemonDataRequestInfo.pokemonId)
  return _internal_mutable_pokemonid();
}

// .UserProtocol.UserPokemonDataRequestInfo.PokemonDataRequestType reqType = 3;
inline void UserPokemonDataRequestInfo::clear_reqtype() {
  reqtype_ = 0;
}
inline ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType UserPokemonDataRequestInfo::_internal_reqtype() const {
  return static_cast< ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType >(reqtype_);
}
inline ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType UserPokemonDataRequestInfo::reqtype() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataRequestInfo.reqType)
  return _internal_reqtype();
}
inline void UserPokemonDataRequestInfo::_internal_set_reqtype(::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType value) {
  
  reqtype_ = value;
}
inline void UserPokemonDataRequestInfo::set_reqtype(::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType value) {
  _internal_set_reqtype(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataRequestInfo.reqType)
}

// .UserProtocol.PokemonDataRequestMode mode = 4;
inline void UserPokemonDataRequestInfo::clear_mode() {
  mode_ = 0;
}
inline ::UserProtocol::PokemonDataRequestMode UserPokemonDataRequestInfo::_internal_mode() const {
  return static_cast< ::UserProtocol::PokemonDataRequestMode >(mode_);
}
inline ::UserProtocol::PokemonDataRequestMode UserPokemonDataRequestInfo::mode() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataRequestInfo.mode)
  return _internal_mode();
}
inline void UserPokemonDataRequestInfo::_internal_set_mode(::UserProtocol::PokemonDataRequestMode value) {
  
  mode_ = value;
}
inline void UserPokemonDataRequestInfo::set_mode(::UserProtocol::PokemonDataRequestMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataRequestInfo.mode)
}

// -------------------------------------------------------------------

// PokemonInfo

// int32 id = 1;
inline void PokemonInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::id() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.id)
  return _internal_id();
}
inline void PokemonInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PokemonInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.id)
}

// int32 typeId = 2;
inline void PokemonInfo::clear_typeid_() {
  typeid__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::typeid_() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.typeId)
  return _internal_typeid_();
}
inline void PokemonInfo::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  typeid__ = value;
}
inline void PokemonInfo::set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.typeId)
}

// bytes name = 3;
inline void PokemonInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::name() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.name)
  return _internal_name();
}
inline void PokemonInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.name)
}
inline std::string* PokemonInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PokemonInfo::_internal_name() const {
  return name_.Get();
}
inline void PokemonInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.name)
}
inline void PokemonInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.name)
}
inline void PokemonInfo::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.name)
}
inline std::string* PokemonInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.name)
}
inline std::string* PokemonInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.name)
}

// int32 level = 4;
inline void PokemonInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::level() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.level)
  return _internal_level();
}
inline void PokemonInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PokemonInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.level)
}

// int32 type = 5;
inline void PokemonInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::type() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.type)
  return _internal_type();
}
inline void PokemonInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PokemonInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.type)
}

// int32 EXP = 6;
inline void PokemonInfo::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::exp() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.EXP)
  return _internal_exp();
}
inline void PokemonInfo::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
}
inline void PokemonInfo::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.EXP)
}

// int32 attr = 7;
inline void PokemonInfo::clear_attr() {
  attr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_attr() const {
  return attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::attr() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.attr)
  return _internal_attr();
}
inline void PokemonInfo::_internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attr_ = value;
}
inline void PokemonInfo::set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.attr)
}

// int32 ATK = 8;
inline void PokemonInfo::clear_atk() {
  atk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_atk() const {
  return atk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::atk() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.ATK)
  return _internal_atk();
}
inline void PokemonInfo::_internal_set_atk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atk_ = value;
}
inline void PokemonInfo::set_atk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atk(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.ATK)
}

// int32 DEF = 9;
inline void PokemonInfo::clear_def() {
  def_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_def() const {
  return def_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::def() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.DEF)
  return _internal_def();
}
inline void PokemonInfo::_internal_set_def(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  def_ = value;
}
inline void PokemonInfo::set_def(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_def(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.DEF)
}

// int32 HP = 10;
inline void PokemonInfo::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::hp() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.HP)
  return _internal_hp();
}
inline void PokemonInfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void PokemonInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.HP)
}

// int32 SPD = 11;
inline void PokemonInfo::clear_spd() {
  spd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::_internal_spd() const {
  return spd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PokemonInfo::spd() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.SPD)
  return _internal_spd();
}
inline void PokemonInfo::_internal_set_spd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spd_ = value;
}
inline void PokemonInfo::set_spd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spd(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.SPD)
}

// bytes desc = 12;
inline void PokemonInfo::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::desc() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.desc)
  return _internal_desc();
}
inline void PokemonInfo::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.desc)
}
inline std::string* PokemonInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.desc)
  return _internal_mutable_desc();
}
inline const std::string& PokemonInfo::_internal_desc() const {
  return desc_.Get();
}
inline void PokemonInfo::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.desc)
}
inline void PokemonInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.desc)
}
inline void PokemonInfo::set_desc(const void* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.desc)
}
inline std::string* PokemonInfo::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_desc() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.desc)
}
inline std::string* PokemonInfo::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_desc(
    std::string* desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.desc)
}

// bytes skill_1 = 13;
inline void PokemonInfo::clear_skill_1() {
  skill_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_1() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_1)
  return _internal_skill_1();
}
inline void PokemonInfo::set_skill_1(const std::string& value) {
  _internal_set_skill_1(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_1)
}
inline std::string* PokemonInfo::mutable_skill_1() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_1)
  return _internal_mutable_skill_1();
}
inline const std::string& PokemonInfo::_internal_skill_1() const {
  return skill_1_.Get();
}
inline void PokemonInfo::_internal_set_skill_1(const std::string& value) {
  
  skill_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_1(std::string&& value) {
  
  skill_1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_1)
}
inline void PokemonInfo::set_skill_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_1)
}
inline void PokemonInfo::set_skill_1(const void* value,
    size_t size) {
  
  skill_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_1)
}
inline std::string* PokemonInfo::_internal_mutable_skill_1() {
  
  return skill_1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_1() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_1)
  return skill_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_1(std::string* skill_1) {
  if (skill_1 != nullptr) {
    
  } else {
    
  }
  skill_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_1)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_1(
    std::string* skill_1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_1 != nullptr) {
    
  } else {
    
  }
  skill_1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_1)
}

// bytes skill_2 = 14;
inline void PokemonInfo::clear_skill_2() {
  skill_2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_2() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_2)
  return _internal_skill_2();
}
inline void PokemonInfo::set_skill_2(const std::string& value) {
  _internal_set_skill_2(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_2)
}
inline std::string* PokemonInfo::mutable_skill_2() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_2)
  return _internal_mutable_skill_2();
}
inline const std::string& PokemonInfo::_internal_skill_2() const {
  return skill_2_.Get();
}
inline void PokemonInfo::_internal_set_skill_2(const std::string& value) {
  
  skill_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_2(std::string&& value) {
  
  skill_2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_2)
}
inline void PokemonInfo::set_skill_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_2)
}
inline void PokemonInfo::set_skill_2(const void* value,
    size_t size) {
  
  skill_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_2)
}
inline std::string* PokemonInfo::_internal_mutable_skill_2() {
  
  return skill_2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_2() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_2)
  return skill_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_2(std::string* skill_2) {
  if (skill_2 != nullptr) {
    
  } else {
    
  }
  skill_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_2)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_2(
    std::string* skill_2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_2 != nullptr) {
    
  } else {
    
  }
  skill_2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_2)
}

// bytes skill_3 = 15;
inline void PokemonInfo::clear_skill_3() {
  skill_3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_3() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_3)
  return _internal_skill_3();
}
inline void PokemonInfo::set_skill_3(const std::string& value) {
  _internal_set_skill_3(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_3)
}
inline std::string* PokemonInfo::mutable_skill_3() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_3)
  return _internal_mutable_skill_3();
}
inline const std::string& PokemonInfo::_internal_skill_3() const {
  return skill_3_.Get();
}
inline void PokemonInfo::_internal_set_skill_3(const std::string& value) {
  
  skill_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_3(std::string&& value) {
  
  skill_3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_3)
}
inline void PokemonInfo::set_skill_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_3)
}
inline void PokemonInfo::set_skill_3(const void* value,
    size_t size) {
  
  skill_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_3)
}
inline std::string* PokemonInfo::_internal_mutable_skill_3() {
  
  return skill_3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_3() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_3)
  return skill_3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_3(std::string* skill_3) {
  if (skill_3 != nullptr) {
    
  } else {
    
  }
  skill_3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_3)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_3(
    std::string* skill_3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_3 != nullptr) {
    
  } else {
    
  }
  skill_3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_3)
}

// bytes skill_4 = 16;
inline void PokemonInfo::clear_skill_4() {
  skill_4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_4() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_4)
  return _internal_skill_4();
}
inline void PokemonInfo::set_skill_4(const std::string& value) {
  _internal_set_skill_4(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_4)
}
inline std::string* PokemonInfo::mutable_skill_4() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_4)
  return _internal_mutable_skill_4();
}
inline const std::string& PokemonInfo::_internal_skill_4() const {
  return skill_4_.Get();
}
inline void PokemonInfo::_internal_set_skill_4(const std::string& value) {
  
  skill_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_4(std::string&& value) {
  
  skill_4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_4)
}
inline void PokemonInfo::set_skill_4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_4)
}
inline void PokemonInfo::set_skill_4(const void* value,
    size_t size) {
  
  skill_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_4)
}
inline std::string* PokemonInfo::_internal_mutable_skill_4() {
  
  return skill_4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_4() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_4)
  return skill_4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_4(std::string* skill_4) {
  if (skill_4 != nullptr) {
    
  } else {
    
  }
  skill_4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_4)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_4(
    std::string* skill_4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_4 != nullptr) {
    
  } else {
    
  }
  skill_4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_4)
}

// bytes skill_1_desc = 17;
inline void PokemonInfo::clear_skill_1_desc() {
  skill_1_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_1_desc() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_1_desc)
  return _internal_skill_1_desc();
}
inline void PokemonInfo::set_skill_1_desc(const std::string& value) {
  _internal_set_skill_1_desc(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_1_desc)
}
inline std::string* PokemonInfo::mutable_skill_1_desc() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_1_desc)
  return _internal_mutable_skill_1_desc();
}
inline const std::string& PokemonInfo::_internal_skill_1_desc() const {
  return skill_1_desc_.Get();
}
inline void PokemonInfo::_internal_set_skill_1_desc(const std::string& value) {
  
  skill_1_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_1_desc(std::string&& value) {
  
  skill_1_desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_1_desc)
}
inline void PokemonInfo::set_skill_1_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_1_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_1_desc)
}
inline void PokemonInfo::set_skill_1_desc(const void* value,
    size_t size) {
  
  skill_1_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_1_desc)
}
inline std::string* PokemonInfo::_internal_mutable_skill_1_desc() {
  
  return skill_1_desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_1_desc() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_1_desc)
  return skill_1_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_1_desc(std::string* skill_1_desc) {
  if (skill_1_desc != nullptr) {
    
  } else {
    
  }
  skill_1_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_1_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_1_desc)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_1_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_1_desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_1_desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_1_desc(
    std::string* skill_1_desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_1_desc != nullptr) {
    
  } else {
    
  }
  skill_1_desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_1_desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_1_desc)
}

// bytes skill_2_desc = 18;
inline void PokemonInfo::clear_skill_2_desc() {
  skill_2_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_2_desc() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_2_desc)
  return _internal_skill_2_desc();
}
inline void PokemonInfo::set_skill_2_desc(const std::string& value) {
  _internal_set_skill_2_desc(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_2_desc)
}
inline std::string* PokemonInfo::mutable_skill_2_desc() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_2_desc)
  return _internal_mutable_skill_2_desc();
}
inline const std::string& PokemonInfo::_internal_skill_2_desc() const {
  return skill_2_desc_.Get();
}
inline void PokemonInfo::_internal_set_skill_2_desc(const std::string& value) {
  
  skill_2_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_2_desc(std::string&& value) {
  
  skill_2_desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_2_desc)
}
inline void PokemonInfo::set_skill_2_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_2_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_2_desc)
}
inline void PokemonInfo::set_skill_2_desc(const void* value,
    size_t size) {
  
  skill_2_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_2_desc)
}
inline std::string* PokemonInfo::_internal_mutable_skill_2_desc() {
  
  return skill_2_desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_2_desc() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_2_desc)
  return skill_2_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_2_desc(std::string* skill_2_desc) {
  if (skill_2_desc != nullptr) {
    
  } else {
    
  }
  skill_2_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_2_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_2_desc)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_2_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_2_desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_2_desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_2_desc(
    std::string* skill_2_desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_2_desc != nullptr) {
    
  } else {
    
  }
  skill_2_desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_2_desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_2_desc)
}

// bytes skill_3_desc = 19;
inline void PokemonInfo::clear_skill_3_desc() {
  skill_3_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_3_desc() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_3_desc)
  return _internal_skill_3_desc();
}
inline void PokemonInfo::set_skill_3_desc(const std::string& value) {
  _internal_set_skill_3_desc(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_3_desc)
}
inline std::string* PokemonInfo::mutable_skill_3_desc() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_3_desc)
  return _internal_mutable_skill_3_desc();
}
inline const std::string& PokemonInfo::_internal_skill_3_desc() const {
  return skill_3_desc_.Get();
}
inline void PokemonInfo::_internal_set_skill_3_desc(const std::string& value) {
  
  skill_3_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_3_desc(std::string&& value) {
  
  skill_3_desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_3_desc)
}
inline void PokemonInfo::set_skill_3_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_3_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_3_desc)
}
inline void PokemonInfo::set_skill_3_desc(const void* value,
    size_t size) {
  
  skill_3_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_3_desc)
}
inline std::string* PokemonInfo::_internal_mutable_skill_3_desc() {
  
  return skill_3_desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_3_desc() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_3_desc)
  return skill_3_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_3_desc(std::string* skill_3_desc) {
  if (skill_3_desc != nullptr) {
    
  } else {
    
  }
  skill_3_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_3_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_3_desc)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_3_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_3_desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_3_desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_3_desc(
    std::string* skill_3_desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_3_desc != nullptr) {
    
  } else {
    
  }
  skill_3_desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_3_desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_3_desc)
}

// bytes skill_4_desc = 20;
inline void PokemonInfo::clear_skill_4_desc() {
  skill_4_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PokemonInfo::skill_4_desc() const {
  // @@protoc_insertion_point(field_get:UserProtocol.PokemonInfo.skill_4_desc)
  return _internal_skill_4_desc();
}
inline void PokemonInfo::set_skill_4_desc(const std::string& value) {
  _internal_set_skill_4_desc(value);
  // @@protoc_insertion_point(field_set:UserProtocol.PokemonInfo.skill_4_desc)
}
inline std::string* PokemonInfo::mutable_skill_4_desc() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.PokemonInfo.skill_4_desc)
  return _internal_mutable_skill_4_desc();
}
inline const std::string& PokemonInfo::_internal_skill_4_desc() const {
  return skill_4_desc_.Get();
}
inline void PokemonInfo::_internal_set_skill_4_desc(const std::string& value) {
  
  skill_4_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PokemonInfo::set_skill_4_desc(std::string&& value) {
  
  skill_4_desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.PokemonInfo.skill_4_desc)
}
inline void PokemonInfo::set_skill_4_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_4_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.PokemonInfo.skill_4_desc)
}
inline void PokemonInfo::set_skill_4_desc(const void* value,
    size_t size) {
  
  skill_4_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.PokemonInfo.skill_4_desc)
}
inline std::string* PokemonInfo::_internal_mutable_skill_4_desc() {
  
  return skill_4_desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PokemonInfo::release_skill_4_desc() {
  // @@protoc_insertion_point(field_release:UserProtocol.PokemonInfo.skill_4_desc)
  return skill_4_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PokemonInfo::set_allocated_skill_4_desc(std::string* skill_4_desc) {
  if (skill_4_desc != nullptr) {
    
  } else {
    
  }
  skill_4_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_4_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.PokemonInfo.skill_4_desc)
}
inline std::string* PokemonInfo::unsafe_arena_release_skill_4_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.PokemonInfo.skill_4_desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_4_desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PokemonInfo::unsafe_arena_set_allocated_skill_4_desc(
    std::string* skill_4_desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill_4_desc != nullptr) {
    
  } else {
    
  }
  skill_4_desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill_4_desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.PokemonInfo.skill_4_desc)
}

// -------------------------------------------------------------------

// UserPokemonDataResponseInfo

// bytes userName = 1;
inline void UserPokemonDataResponseInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPokemonDataResponseInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataResponseInfo.userName)
  return _internal_username();
}
inline void UserPokemonDataResponseInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataResponseInfo.userName)
}
inline std::string* UserPokemonDataResponseInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserPokemonDataResponseInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserPokemonDataResponseInfo::_internal_username() const {
  return username_.Get();
}
inline void UserPokemonDataResponseInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPokemonDataResponseInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserPokemonDataResponseInfo.userName)
}
inline void UserPokemonDataResponseInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserPokemonDataResponseInfo.userName)
}
inline void UserPokemonDataResponseInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserPokemonDataResponseInfo.userName)
}
inline std::string* UserPokemonDataResponseInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPokemonDataResponseInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserPokemonDataResponseInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPokemonDataResponseInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserPokemonDataResponseInfo.userName)
}
inline std::string* UserPokemonDataResponseInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserPokemonDataResponseInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserPokemonDataResponseInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserPokemonDataResponseInfo.userName)
}

// .UserProtocol.PokemonDataRequestMode mode = 2;
inline void UserPokemonDataResponseInfo::clear_mode() {
  mode_ = 0;
}
inline ::UserProtocol::PokemonDataRequestMode UserPokemonDataResponseInfo::_internal_mode() const {
  return static_cast< ::UserProtocol::PokemonDataRequestMode >(mode_);
}
inline ::UserProtocol::PokemonDataRequestMode UserPokemonDataResponseInfo::mode() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataResponseInfo.mode)
  return _internal_mode();
}
inline void UserPokemonDataResponseInfo::_internal_set_mode(::UserProtocol::PokemonDataRequestMode value) {
  
  mode_ = value;
}
inline void UserPokemonDataResponseInfo::set_mode(::UserProtocol::PokemonDataRequestMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserPokemonDataResponseInfo.mode)
}

// repeated .UserProtocol.PokemonInfo pkmData = 3;
inline int UserPokemonDataResponseInfo::_internal_pkmdata_size() const {
  return pkmdata_.size();
}
inline int UserPokemonDataResponseInfo::pkmdata_size() const {
  return _internal_pkmdata_size();
}
inline void UserPokemonDataResponseInfo::clear_pkmdata() {
  pkmdata_.Clear();
}
inline ::UserProtocol::PokemonInfo* UserPokemonDataResponseInfo::mutable_pkmdata(int index) {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserPokemonDataResponseInfo.pkmData)
  return pkmdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::PokemonInfo >*
UserPokemonDataResponseInfo::mutable_pkmdata() {
  // @@protoc_insertion_point(field_mutable_list:UserProtocol.UserPokemonDataResponseInfo.pkmData)
  return &pkmdata_;
}
inline const ::UserProtocol::PokemonInfo& UserPokemonDataResponseInfo::_internal_pkmdata(int index) const {
  return pkmdata_.Get(index);
}
inline const ::UserProtocol::PokemonInfo& UserPokemonDataResponseInfo::pkmdata(int index) const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserPokemonDataResponseInfo.pkmData)
  return _internal_pkmdata(index);
}
inline ::UserProtocol::PokemonInfo* UserPokemonDataResponseInfo::_internal_add_pkmdata() {
  return pkmdata_.Add();
}
inline ::UserProtocol::PokemonInfo* UserPokemonDataResponseInfo::add_pkmdata() {
  // @@protoc_insertion_point(field_add:UserProtocol.UserPokemonDataResponseInfo.pkmData)
  return _internal_add_pkmdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::PokemonInfo >&
UserPokemonDataResponseInfo::pkmdata() const {
  // @@protoc_insertion_point(field_list:UserProtocol.UserPokemonDataResponseInfo.pkmData)
  return pkmdata_;
}

// -------------------------------------------------------------------

// OnlineUserListRequestInfo

// bytes userName = 1;
inline void OnlineUserListRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnlineUserListRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.OnlineUserListRequestInfo.userName)
  return _internal_username();
}
inline void OnlineUserListRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.OnlineUserListRequestInfo.userName)
}
inline std::string* OnlineUserListRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.OnlineUserListRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& OnlineUserListRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void OnlineUserListRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnlineUserListRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.OnlineUserListRequestInfo.userName)
}
inline void OnlineUserListRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.OnlineUserListRequestInfo.userName)
}
inline void OnlineUserListRequestInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.OnlineUserListRequestInfo.userName)
}
inline std::string* OnlineUserListRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnlineUserListRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.OnlineUserListRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnlineUserListRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.OnlineUserListRequestInfo.userName)
}
inline std::string* OnlineUserListRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.OnlineUserListRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnlineUserListRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.OnlineUserListRequestInfo.userName)
}

// -------------------------------------------------------------------

// UserStatusInfo

// bytes userName = 1;
inline void UserStatusInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserStatusInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserStatusInfo.userName)
  return _internal_username();
}
inline void UserStatusInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserStatusInfo.userName)
}
inline std::string* UserStatusInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserStatusInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserStatusInfo::_internal_username() const {
  return username_.Get();
}
inline void UserStatusInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserStatusInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserStatusInfo.userName)
}
inline void UserStatusInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserStatusInfo.userName)
}
inline void UserStatusInfo::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserStatusInfo.userName)
}
inline std::string* UserStatusInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserStatusInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserStatusInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserStatusInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserStatusInfo.userName)
}
inline std::string* UserStatusInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserStatusInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserStatusInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserStatusInfo.userName)
}

// int32 userStatus = 2;
inline void UserStatusInfo::clear_userstatus() {
  userstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserStatusInfo::_internal_userstatus() const {
  return userstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserStatusInfo::userstatus() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserStatusInfo.userStatus)
  return _internal_userstatus();
}
inline void UserStatusInfo::_internal_set_userstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userstatus_ = value;
}
inline void UserStatusInfo::set_userstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userstatus(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserStatusInfo.userStatus)
}

// -------------------------------------------------------------------

// OnlineUserListResponseInfo

// repeated .UserProtocol.UserStatusInfo userList = 1;
inline int OnlineUserListResponseInfo::_internal_userlist_size() const {
  return userlist_.size();
}
inline int OnlineUserListResponseInfo::userlist_size() const {
  return _internal_userlist_size();
}
inline void OnlineUserListResponseInfo::clear_userlist() {
  userlist_.Clear();
}
inline ::UserProtocol::UserStatusInfo* OnlineUserListResponseInfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:UserProtocol.OnlineUserListResponseInfo.userList)
  return userlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::UserStatusInfo >*
OnlineUserListResponseInfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:UserProtocol.OnlineUserListResponseInfo.userList)
  return &userlist_;
}
inline const ::UserProtocol::UserStatusInfo& OnlineUserListResponseInfo::_internal_userlist(int index) const {
  return userlist_.Get(index);
}
inline const ::UserProtocol::UserStatusInfo& OnlineUserListResponseInfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:UserProtocol.OnlineUserListResponseInfo.userList)
  return _internal_userlist(index);
}
inline ::UserProtocol::UserStatusInfo* OnlineUserListResponseInfo::_internal_add_userlist() {
  return userlist_.Add();
}
inline ::UserProtocol::UserStatusInfo* OnlineUserListResponseInfo::add_userlist() {
  // @@protoc_insertion_point(field_add:UserProtocol.OnlineUserListResponseInfo.userList)
  return _internal_add_userlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserProtocol::UserStatusInfo >&
OnlineUserListResponseInfo::userlist() const {
  // @@protoc_insertion_point(field_list:UserProtocol.OnlineUserListResponseInfo.userList)
  return userlist_;
}

// -------------------------------------------------------------------

// TransferPokemonRequest

// bytes fromUser = 1;
inline void TransferPokemonRequest::clear_fromuser() {
  fromuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferPokemonRequest::fromuser() const {
  // @@protoc_insertion_point(field_get:UserProtocol.TransferPokemonRequest.fromUser)
  return _internal_fromuser();
}
inline void TransferPokemonRequest::set_fromuser(const std::string& value) {
  _internal_set_fromuser(value);
  // @@protoc_insertion_point(field_set:UserProtocol.TransferPokemonRequest.fromUser)
}
inline std::string* TransferPokemonRequest::mutable_fromuser() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.TransferPokemonRequest.fromUser)
  return _internal_mutable_fromuser();
}
inline const std::string& TransferPokemonRequest::_internal_fromuser() const {
  return fromuser_.Get();
}
inline void TransferPokemonRequest::_internal_set_fromuser(const std::string& value) {
  
  fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferPokemonRequest::set_fromuser(std::string&& value) {
  
  fromuser_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.TransferPokemonRequest.fromUser)
}
inline void TransferPokemonRequest::set_fromuser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.TransferPokemonRequest.fromUser)
}
inline void TransferPokemonRequest::set_fromuser(const void* value,
    size_t size) {
  
  fromuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.TransferPokemonRequest.fromUser)
}
inline std::string* TransferPokemonRequest::_internal_mutable_fromuser() {
  
  return fromuser_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferPokemonRequest::release_fromuser() {
  // @@protoc_insertion_point(field_release:UserProtocol.TransferPokemonRequest.fromUser)
  return fromuser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferPokemonRequest::set_allocated_fromuser(std::string* fromuser) {
  if (fromuser != nullptr) {
    
  } else {
    
  }
  fromuser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromuser,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.TransferPokemonRequest.fromUser)
}
inline std::string* TransferPokemonRequest::unsafe_arena_release_fromuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.TransferPokemonRequest.fromUser)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fromuser_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferPokemonRequest::unsafe_arena_set_allocated_fromuser(
    std::string* fromuser) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fromuser != nullptr) {
    
  } else {
    
  }
  fromuser_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fromuser, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.TransferPokemonRequest.fromUser)
}

// bytes destUser = 2;
inline void TransferPokemonRequest::clear_destuser() {
  destuser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferPokemonRequest::destuser() const {
  // @@protoc_insertion_point(field_get:UserProtocol.TransferPokemonRequest.destUser)
  return _internal_destuser();
}
inline void TransferPokemonRequest::set_destuser(const std::string& value) {
  _internal_set_destuser(value);
  // @@protoc_insertion_point(field_set:UserProtocol.TransferPokemonRequest.destUser)
}
inline std::string* TransferPokemonRequest::mutable_destuser() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.TransferPokemonRequest.destUser)
  return _internal_mutable_destuser();
}
inline const std::string& TransferPokemonRequest::_internal_destuser() const {
  return destuser_.Get();
}
inline void TransferPokemonRequest::_internal_set_destuser(const std::string& value) {
  
  destuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferPokemonRequest::set_destuser(std::string&& value) {
  
  destuser_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.TransferPokemonRequest.destUser)
}
inline void TransferPokemonRequest::set_destuser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.TransferPokemonRequest.destUser)
}
inline void TransferPokemonRequest::set_destuser(const void* value,
    size_t size) {
  
  destuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.TransferPokemonRequest.destUser)
}
inline std::string* TransferPokemonRequest::_internal_mutable_destuser() {
  
  return destuser_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferPokemonRequest::release_destuser() {
  // @@protoc_insertion_point(field_release:UserProtocol.TransferPokemonRequest.destUser)
  return destuser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferPokemonRequest::set_allocated_destuser(std::string* destuser) {
  if (destuser != nullptr) {
    
  } else {
    
  }
  destuser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destuser,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.TransferPokemonRequest.destUser)
}
inline std::string* TransferPokemonRequest::unsafe_arena_release_destuser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.TransferPokemonRequest.destUser)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return destuser_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferPokemonRequest::unsafe_arena_set_allocated_destuser(
    std::string* destuser) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destuser != nullptr) {
    
  } else {
    
  }
  destuser_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destuser, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.TransferPokemonRequest.destUser)
}

// int32 pkmId = 3;
inline void TransferPokemonRequest::clear_pkmid() {
  pkmid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransferPokemonRequest::_internal_pkmid() const {
  return pkmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransferPokemonRequest::pkmid() const {
  // @@protoc_insertion_point(field_get:UserProtocol.TransferPokemonRequest.pkmId)
  return _internal_pkmid();
}
inline void TransferPokemonRequest::_internal_set_pkmid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pkmid_ = value;
}
inline void TransferPokemonRequest::set_pkmid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pkmid(value);
  // @@protoc_insertion_point(field_set:UserProtocol.TransferPokemonRequest.pkmId)
}

// -------------------------------------------------------------------

// TransferPokemonResponse

// .UserProtocol.TransferPokemonResponse.TransferPokemonStatus status = 1;
inline void TransferPokemonResponse::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus TransferPokemonResponse::_internal_status() const {
  return static_cast< ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus >(status_);
}
inline ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus TransferPokemonResponse::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.TransferPokemonResponse.status)
  return _internal_status();
}
inline void TransferPokemonResponse::_internal_set_status(::UserProtocol::TransferPokemonResponse_TransferPokemonStatus value) {
  
  status_ = value;
}
inline void TransferPokemonResponse::set_status(::UserProtocol::TransferPokemonResponse_TransferPokemonStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.TransferPokemonResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus>() {
  return ::UserProtocol::UserSignUpResponseInfo_SignUpStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserLoginResponseInfo_LoginStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserLoginResponseInfo_LoginStatus>() {
  return ::UserProtocol::UserLoginResponseInfo_LoginStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserInfoResponse_UserInfoResponseStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserInfoResponse_UserInfoResponseStatus>() {
  return ::UserProtocol::UserInfoResponse_UserInfoResponseStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserInfoResponse_BadgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserInfoResponse_BadgeType>() {
  return ::UserProtocol::UserInfoResponse_BadgeType_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserInfoResponse_UserStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserInfoResponse_UserStatus>() {
  return ::UserProtocol::UserInfoResponse_UserStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType>() {
  return ::UserProtocol::UserPokemonDataRequestInfo_PokemonDataRequestType_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus>() {
  return ::UserProtocol::TransferPokemonResponse_TransferPokemonStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::PokemonDataRequestMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::PokemonDataRequestMode>() {
  return ::UserProtocol::PokemonDataRequestMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto
