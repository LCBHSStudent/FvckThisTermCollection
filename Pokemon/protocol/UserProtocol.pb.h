// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserProtocol_2eproto;
namespace UserProtocol {
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserLoginRequestInfo;
class UserLoginRequestInfoDefaultTypeInternal;
extern UserLoginRequestInfoDefaultTypeInternal _UserLoginRequestInfo_default_instance_;
class UserLoginResponseInfo;
class UserLoginResponseInfoDefaultTypeInternal;
extern UserLoginResponseInfoDefaultTypeInternal _UserLoginResponseInfo_default_instance_;
class UserSignUpRequestInfo;
class UserSignUpRequestInfoDefaultTypeInternal;
extern UserSignUpRequestInfoDefaultTypeInternal _UserSignUpRequestInfo_default_instance_;
class UserSignUpResponseInfo;
class UserSignUpResponseInfoDefaultTypeInternal;
extern UserSignUpResponseInfoDefaultTypeInternal _UserSignUpResponseInfo_default_instance_;
}  // namespace UserProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::UserProtocol::UserInfo* Arena::CreateMaybeMessage<::UserProtocol::UserInfo>(Arena*);
template<> ::UserProtocol::UserLoginRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::UserLoginRequestInfo>(Arena*);
template<> ::UserProtocol::UserLoginResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::UserLoginResponseInfo>(Arena*);
template<> ::UserProtocol::UserSignUpRequestInfo* Arena::CreateMaybeMessage<::UserProtocol::UserSignUpRequestInfo>(Arena*);
template<> ::UserProtocol::UserSignUpResponseInfo* Arena::CreateMaybeMessage<::UserProtocol::UserSignUpResponseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserProtocol {

enum UserSignUpResponseInfo_SignUpStatus : int {
  UserSignUpResponseInfo_SignUpStatus_SUCCESS = 0,
  UserSignUpResponseInfo_SignUpStatus_USER_ALREADY_EXISTS = 1,
  UserSignUpResponseInfo_SignUpStatus_USERNAME_FORMAT_ERROR = 2,
  UserSignUpResponseInfo_SignUpStatus_USERPSW_FORMAT_ERROR = 3,
  UserSignUpResponseInfo_SignUpStatus_SERVER_REFUSED = 4,
  UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE = 5,
  UserSignUpResponseInfo_SignUpStatus_UserSignUpResponseInfo_SignUpStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserSignUpResponseInfo_SignUpStatus_UserSignUpResponseInfo_SignUpStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserSignUpResponseInfo_SignUpStatus_IsValid(int value);
constexpr UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MIN = UserSignUpResponseInfo_SignUpStatus_SUCCESS;
constexpr UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX = UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE;
constexpr int UserSignUpResponseInfo_SignUpStatus_SignUpStatus_ARRAYSIZE = UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSignUpResponseInfo_SignUpStatus_descriptor();
template<typename T>
inline const std::string& UserSignUpResponseInfo_SignUpStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserSignUpResponseInfo_SignUpStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserSignUpResponseInfo_SignUpStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserSignUpResponseInfo_SignUpStatus_descriptor(), enum_t_value);
}
inline bool UserSignUpResponseInfo_SignUpStatus_Parse(
    const std::string& name, UserSignUpResponseInfo_SignUpStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserSignUpResponseInfo_SignUpStatus>(
    UserSignUpResponseInfo_SignUpStatus_descriptor(), name, value);
}
enum UserLoginResponseInfo_LoginStatus : int {
  UserLoginResponseInfo_LoginStatus_SUCCESS = 0,
  UserLoginResponseInfo_LoginStatus_USER_NOT_EXISTS = 1,
  UserLoginResponseInfo_LoginStatus_USERPSW_ERROR = 3,
  UserLoginResponseInfo_LoginStatus_SERVER_REFUSED = 4,
  UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE = 5,
  UserLoginResponseInfo_LoginStatus_UserLoginResponseInfo_LoginStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserLoginResponseInfo_LoginStatus_UserLoginResponseInfo_LoginStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserLoginResponseInfo_LoginStatus_IsValid(int value);
constexpr UserLoginResponseInfo_LoginStatus UserLoginResponseInfo_LoginStatus_LoginStatus_MIN = UserLoginResponseInfo_LoginStatus_SUCCESS;
constexpr UserLoginResponseInfo_LoginStatus UserLoginResponseInfo_LoginStatus_LoginStatus_MAX = UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE;
constexpr int UserLoginResponseInfo_LoginStatus_LoginStatus_ARRAYSIZE = UserLoginResponseInfo_LoginStatus_LoginStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserLoginResponseInfo_LoginStatus_descriptor();
template<typename T>
inline const std::string& UserLoginResponseInfo_LoginStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserLoginResponseInfo_LoginStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserLoginResponseInfo_LoginStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserLoginResponseInfo_LoginStatus_descriptor(), enum_t_value);
}
inline bool UserLoginResponseInfo_LoginStatus_Parse(
    const std::string& name, UserLoginResponseInfo_LoginStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserLoginResponseInfo_LoginStatus>(
    UserLoginResponseInfo_LoginStatus_descriptor(), name, value);
}
// ===================================================================

class UserSignUpRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserSignUpRequestInfo) */ {
 public:
  inline UserSignUpRequestInfo() : UserSignUpRequestInfo(nullptr) {};
  virtual ~UserSignUpRequestInfo();

  UserSignUpRequestInfo(const UserSignUpRequestInfo& from);
  UserSignUpRequestInfo(UserSignUpRequestInfo&& from) noexcept
    : UserSignUpRequestInfo() {
    *this = ::std::move(from);
  }

  inline UserSignUpRequestInfo& operator=(const UserSignUpRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpRequestInfo& operator=(UserSignUpRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSignUpRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSignUpRequestInfo* internal_default_instance() {
    return reinterpret_cast<const UserSignUpRequestInfo*>(
               &_UserSignUpRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserSignUpRequestInfo& a, UserSignUpRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSignUpRequestInfo* New() const final {
    return CreateMaybeMessage<UserSignUpRequestInfo>(nullptr);
  }

  UserSignUpRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSignUpRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSignUpRequestInfo& from);
  void MergeFrom(const UserSignUpRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserSignUpRequestInfo";
  }
  protected:
  explicit UserSignUpRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPswFieldNumber = 2,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userPsw = 2;
  void clear_userpsw();
  const std::string& userpsw() const;
  void set_userpsw(const std::string& value);
  void set_userpsw(std::string&& value);
  void set_userpsw(const char* value);
  void set_userpsw(const char* value, size_t size);
  std::string* mutable_userpsw();
  std::string* release_userpsw();
  void set_allocated_userpsw(std::string* userpsw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userpsw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userpsw(
      std::string* userpsw);
  private:
  const std::string& _internal_userpsw() const;
  void _internal_set_userpsw(const std::string& value);
  std::string* _internal_mutable_userpsw();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserSignUpRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpsw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserSignUpResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserSignUpResponseInfo) */ {
 public:
  inline UserSignUpResponseInfo() : UserSignUpResponseInfo(nullptr) {};
  virtual ~UserSignUpResponseInfo();

  UserSignUpResponseInfo(const UserSignUpResponseInfo& from);
  UserSignUpResponseInfo(UserSignUpResponseInfo&& from) noexcept
    : UserSignUpResponseInfo() {
    *this = ::std::move(from);
  }

  inline UserSignUpResponseInfo& operator=(const UserSignUpResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpResponseInfo& operator=(UserSignUpResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSignUpResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSignUpResponseInfo* internal_default_instance() {
    return reinterpret_cast<const UserSignUpResponseInfo*>(
               &_UserSignUpResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserSignUpResponseInfo& a, UserSignUpResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSignUpResponseInfo* New() const final {
    return CreateMaybeMessage<UserSignUpResponseInfo>(nullptr);
  }

  UserSignUpResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSignUpResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSignUpResponseInfo& from);
  void MergeFrom(const UserSignUpResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserSignUpResponseInfo";
  }
  protected:
  explicit UserSignUpResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserSignUpResponseInfo_SignUpStatus SignUpStatus;
  static constexpr SignUpStatus SUCCESS =
    UserSignUpResponseInfo_SignUpStatus_SUCCESS;
  static constexpr SignUpStatus USER_ALREADY_EXISTS =
    UserSignUpResponseInfo_SignUpStatus_USER_ALREADY_EXISTS;
  static constexpr SignUpStatus USERNAME_FORMAT_ERROR =
    UserSignUpResponseInfo_SignUpStatus_USERNAME_FORMAT_ERROR;
  static constexpr SignUpStatus USERPSW_FORMAT_ERROR =
    UserSignUpResponseInfo_SignUpStatus_USERPSW_FORMAT_ERROR;
  static constexpr SignUpStatus SERVER_REFUSED =
    UserSignUpResponseInfo_SignUpStatus_SERVER_REFUSED;
  static constexpr SignUpStatus UNKNOWN_FAILURE =
    UserSignUpResponseInfo_SignUpStatus_UNKNOWN_FAILURE;
  static inline bool SignUpStatus_IsValid(int value) {
    return UserSignUpResponseInfo_SignUpStatus_IsValid(value);
  }
  static constexpr SignUpStatus SignUpStatus_MIN =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MIN;
  static constexpr SignUpStatus SignUpStatus_MAX =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_MAX;
  static constexpr int SignUpStatus_ARRAYSIZE =
    UserSignUpResponseInfo_SignUpStatus_SignUpStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignUpStatus_descriptor() {
    return UserSignUpResponseInfo_SignUpStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& SignUpStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignUpStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignUpStatus_Name.");
    return UserSignUpResponseInfo_SignUpStatus_Name(enum_t_value);
  }
  static inline bool SignUpStatus_Parse(const std::string& name,
      SignUpStatus* value) {
    return UserSignUpResponseInfo_SignUpStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .UserProtocol.UserSignUpResponseInfo.SignUpStatus status = 1;
  void clear_status();
  ::UserProtocol::UserSignUpResponseInfo_SignUpStatus status() const;
  void set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value);
  private:
  ::UserProtocol::UserSignUpResponseInfo_SignUpStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserSignUpResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRequestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserLoginRequestInfo) */ {
 public:
  inline UserLoginRequestInfo() : UserLoginRequestInfo(nullptr) {};
  virtual ~UserLoginRequestInfo();

  UserLoginRequestInfo(const UserLoginRequestInfo& from);
  UserLoginRequestInfo(UserLoginRequestInfo&& from) noexcept
    : UserLoginRequestInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginRequestInfo& operator=(const UserLoginRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequestInfo& operator=(UserLoginRequestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginRequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequestInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequestInfo*>(
               &_UserLoginRequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserLoginRequestInfo& a, UserLoginRequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequestInfo* New() const final {
    return CreateMaybeMessage<UserLoginRequestInfo>(nullptr);
  }

  UserLoginRequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginRequestInfo& from);
  void MergeFrom(const UserLoginRequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserLoginRequestInfo";
  }
  protected:
  explicit UserLoginRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPswFieldNumber = 2,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userPsw = 2;
  void clear_userpsw();
  const std::string& userpsw() const;
  void set_userpsw(const std::string& value);
  void set_userpsw(std::string&& value);
  void set_userpsw(const char* value);
  void set_userpsw(const char* value, size_t size);
  std::string* mutable_userpsw();
  std::string* release_userpsw();
  void set_allocated_userpsw(std::string* userpsw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userpsw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userpsw(
      std::string* userpsw);
  private:
  const std::string& _internal_userpsw() const;
  void _internal_set_userpsw(const std::string& value);
  std::string* _internal_mutable_userpsw();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserLoginRequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpsw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserLoginResponseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserLoginResponseInfo) */ {
 public:
  inline UserLoginResponseInfo() : UserLoginResponseInfo(nullptr) {};
  virtual ~UserLoginResponseInfo();

  UserLoginResponseInfo(const UserLoginResponseInfo& from);
  UserLoginResponseInfo(UserLoginResponseInfo&& from) noexcept
    : UserLoginResponseInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginResponseInfo& operator=(const UserLoginResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginResponseInfo& operator=(UserLoginResponseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponseInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponseInfo*>(
               &_UserLoginResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserLoginResponseInfo& a, UserLoginResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginResponseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponseInfo* New() const final {
    return CreateMaybeMessage<UserLoginResponseInfo>(nullptr);
  }

  UserLoginResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginResponseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginResponseInfo& from);
  void MergeFrom(const UserLoginResponseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserLoginResponseInfo";
  }
  protected:
  explicit UserLoginResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserLoginResponseInfo_LoginStatus LoginStatus;
  static constexpr LoginStatus SUCCESS =
    UserLoginResponseInfo_LoginStatus_SUCCESS;
  static constexpr LoginStatus USER_NOT_EXISTS =
    UserLoginResponseInfo_LoginStatus_USER_NOT_EXISTS;
  static constexpr LoginStatus USERPSW_ERROR =
    UserLoginResponseInfo_LoginStatus_USERPSW_ERROR;
  static constexpr LoginStatus SERVER_REFUSED =
    UserLoginResponseInfo_LoginStatus_SERVER_REFUSED;
  static constexpr LoginStatus UNKNOWN_FAILURE =
    UserLoginResponseInfo_LoginStatus_UNKNOWN_FAILURE;
  static inline bool LoginStatus_IsValid(int value) {
    return UserLoginResponseInfo_LoginStatus_IsValid(value);
  }
  static constexpr LoginStatus LoginStatus_MIN =
    UserLoginResponseInfo_LoginStatus_LoginStatus_MIN;
  static constexpr LoginStatus LoginStatus_MAX =
    UserLoginResponseInfo_LoginStatus_LoginStatus_MAX;
  static constexpr int LoginStatus_ARRAYSIZE =
    UserLoginResponseInfo_LoginStatus_LoginStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoginStatus_descriptor() {
    return UserLoginResponseInfo_LoginStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& LoginStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginStatus_Name.");
    return UserLoginResponseInfo_LoginStatus_Name(enum_t_value);
  }
  static inline bool LoginStatus_Parse(const std::string& name,
      LoginStatus* value) {
    return UserLoginResponseInfo_LoginStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .UserProtocol.UserLoginResponseInfo.LoginStatus status = 1;
  void clear_status();
  ::UserProtocol::UserLoginResponseInfo_LoginStatus status() const;
  void set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value);
  private:
  ::UserProtocol::UserLoginResponseInfo_LoginStatus _internal_status() const;
  void _internal_set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value);
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserLoginResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserProtocol.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {};
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserProtocol.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserProtocol_2eproto);
    return ::descriptor_table_UserProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPokemonIdFieldNumber = 2,
    kUserNameFieldNumber = 1,
  };
  // repeated int32 pokemonId = 2;
  int pokemonid_size() const;
  private:
  int _internal_pokemonid_size() const;
  public:
  void clear_pokemonid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pokemonid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pokemonid() const;
  void _internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pokemonid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pokemonid(int index) const;
  void set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pokemonid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pokemonid();

  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:UserProtocol.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pokemonid_;
  mutable std::atomic<int> _pokemonid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserSignUpRequestInfo

// string userName = 1;
inline void UserSignUpRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSignUpRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpRequestInfo.userName)
  return _internal_username();
}
inline void UserSignUpRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserSignUpRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserSignUpRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void UserSignUpRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSignUpRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserSignUpRequestInfo.userName)
}
inline void UserSignUpRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserSignUpRequestInfo.userName)
}
inline void UserSignUpRequestInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSignUpRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserSignUpRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSignUpRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserSignUpRequestInfo.userName)
}
inline std::string* UserSignUpRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserSignUpRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserSignUpRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserSignUpRequestInfo.userName)
}

// string userPsw = 2;
inline void UserSignUpRequestInfo::clear_userpsw() {
  userpsw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSignUpRequestInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpRequestInfo.userPsw)
  return _internal_userpsw();
}
inline void UserSignUpRequestInfo::set_userpsw(const std::string& value) {
  _internal_set_userpsw(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::mutable_userpsw() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserSignUpRequestInfo.userPsw)
  return _internal_mutable_userpsw();
}
inline const std::string& UserSignUpRequestInfo::_internal_userpsw() const {
  return userpsw_.Get();
}
inline void UserSignUpRequestInfo::_internal_set_userpsw(const std::string& value) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSignUpRequestInfo::set_userpsw(std::string&& value) {
  
  userpsw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline void UserSignUpRequestInfo::set_userpsw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline void UserSignUpRequestInfo::set_userpsw(const char* value,
    size_t size) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::_internal_mutable_userpsw() {
  
  return userpsw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSignUpRequestInfo::release_userpsw() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserSignUpRequestInfo.userPsw)
  return userpsw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSignUpRequestInfo::set_allocated_userpsw(std::string* userpsw) {
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpsw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserSignUpRequestInfo.userPsw)
}
inline std::string* UserSignUpRequestInfo::unsafe_arena_release_userpsw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserSignUpRequestInfo.userPsw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userpsw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserSignUpRequestInfo::unsafe_arena_set_allocated_userpsw(
    std::string* userpsw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userpsw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserSignUpRequestInfo.userPsw)
}

// -------------------------------------------------------------------

// UserSignUpResponseInfo

// .UserProtocol.UserSignUpResponseInfo.SignUpStatus status = 1;
inline void UserSignUpResponseInfo::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo::_internal_status() const {
  return static_cast< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus >(status_);
}
inline ::UserProtocol::UserSignUpResponseInfo_SignUpStatus UserSignUpResponseInfo::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserSignUpResponseInfo.status)
  return _internal_status();
}
inline void UserSignUpResponseInfo::_internal_set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value) {
  
  status_ = value;
}
inline void UserSignUpResponseInfo::set_status(::UserProtocol::UserSignUpResponseInfo_SignUpStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserSignUpResponseInfo.status)
}

// -------------------------------------------------------------------

// UserLoginRequestInfo

// string userName = 1;
inline void UserLoginRequestInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRequestInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginRequestInfo.userName)
  return _internal_username();
}
inline void UserLoginRequestInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserLoginRequestInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserLoginRequestInfo::_internal_username() const {
  return username_.Get();
}
inline void UserLoginRequestInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRequestInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserLoginRequestInfo.userName)
}
inline void UserLoginRequestInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserLoginRequestInfo.userName)
}
inline void UserLoginRequestInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRequestInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserLoginRequestInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRequestInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserLoginRequestInfo.userName)
}
inline std::string* UserLoginRequestInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserLoginRequestInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRequestInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserLoginRequestInfo.userName)
}

// string userPsw = 2;
inline void UserLoginRequestInfo::clear_userpsw() {
  userpsw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRequestInfo::userpsw() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginRequestInfo.userPsw)
  return _internal_userpsw();
}
inline void UserLoginRequestInfo::set_userpsw(const std::string& value) {
  _internal_set_userpsw(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::mutable_userpsw() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserLoginRequestInfo.userPsw)
  return _internal_mutable_userpsw();
}
inline const std::string& UserLoginRequestInfo::_internal_userpsw() const {
  return userpsw_.Get();
}
inline void UserLoginRequestInfo::_internal_set_userpsw(const std::string& value) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRequestInfo::set_userpsw(std::string&& value) {
  
  userpsw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline void UserLoginRequestInfo::set_userpsw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline void UserLoginRequestInfo::set_userpsw(const char* value,
    size_t size) {
  
  userpsw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::_internal_mutable_userpsw() {
  
  return userpsw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRequestInfo::release_userpsw() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserLoginRequestInfo.userPsw)
  return userpsw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRequestInfo::set_allocated_userpsw(std::string* userpsw) {
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpsw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserLoginRequestInfo.userPsw)
}
inline std::string* UserLoginRequestInfo::unsafe_arena_release_userpsw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserLoginRequestInfo.userPsw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userpsw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRequestInfo::unsafe_arena_set_allocated_userpsw(
    std::string* userpsw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userpsw != nullptr) {
    
  } else {
    
  }
  userpsw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userpsw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserLoginRequestInfo.userPsw)
}

// -------------------------------------------------------------------

// UserLoginResponseInfo

// .UserProtocol.UserLoginResponseInfo.LoginStatus status = 1;
inline void UserLoginResponseInfo::clear_status() {
  status_ = 0;
}
inline ::UserProtocol::UserLoginResponseInfo_LoginStatus UserLoginResponseInfo::_internal_status() const {
  return static_cast< ::UserProtocol::UserLoginResponseInfo_LoginStatus >(status_);
}
inline ::UserProtocol::UserLoginResponseInfo_LoginStatus UserLoginResponseInfo::status() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserLoginResponseInfo.status)
  return _internal_status();
}
inline void UserLoginResponseInfo::_internal_set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value) {
  
  status_ = value;
}
inline void UserLoginResponseInfo::set_status(::UserProtocol::UserLoginResponseInfo_LoginStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserLoginResponseInfo.status)
}

// -------------------------------------------------------------------

// UserInfo

// string userName = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfo.userName)
  return _internal_username();
}
inline void UserInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfo.userName)
}
inline std::string* UserInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserProtocol.UserInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& UserInfo::_internal_username() const {
  return username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserProtocol.UserInfo.userName)
}
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserProtocol.UserInfo.userName)
}
inline void UserInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserProtocol.UserInfo.userName)
}
inline std::string* UserInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserProtocol.UserInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserProtocol.UserInfo.userName)
}
inline std::string* UserInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserProtocol.UserInfo.userName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserProtocol.UserInfo.userName)
}

// repeated int32 pokemonId = 2;
inline int UserInfo::_internal_pokemonid_size() const {
  return pokemonid_.size();
}
inline int UserInfo::pokemonid_size() const {
  return _internal_pokemonid_size();
}
inline void UserInfo::clear_pokemonid() {
  pokemonid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_pokemonid(int index) const {
  return pokemonid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::pokemonid(int index) const {
  // @@protoc_insertion_point(field_get:UserProtocol.UserInfo.pokemonId)
  return _internal_pokemonid(index);
}
inline void UserInfo::set_pokemonid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserProtocol.UserInfo.pokemonId)
}
inline void UserInfo::_internal_add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pokemonid_.Add(value);
}
inline void UserInfo::add_pokemonid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pokemonid(value);
  // @@protoc_insertion_point(field_add:UserProtocol.UserInfo.pokemonId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserInfo::_internal_pokemonid() const {
  return pokemonid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserInfo::pokemonid() const {
  // @@protoc_insertion_point(field_list:UserProtocol.UserInfo.pokemonId)
  return _internal_pokemonid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserInfo::_internal_mutable_pokemonid() {
  return &pokemonid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserInfo::mutable_pokemonid() {
  // @@protoc_insertion_point(field_mutable_list:UserProtocol.UserInfo.pokemonId)
  return _internal_mutable_pokemonid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserSignUpResponseInfo_SignUpStatus>() {
  return ::UserProtocol::UserSignUpResponseInfo_SignUpStatus_descriptor();
}
template <> struct is_proto_enum< ::UserProtocol::UserLoginResponseInfo_LoginStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserProtocol::UserLoginResponseInfo_LoginStatus>() {
  return ::UserProtocol::UserLoginResponseInfo_LoginStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserProtocol_2eproto
